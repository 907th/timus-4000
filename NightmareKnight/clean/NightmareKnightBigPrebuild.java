import java.io.PrintWriter;
import java.util.HashMap;

class NightnareKnightSmallPrebuild {

	int[][][][][] pass = new int[10][10][2][][];
	int[][][][][] rightEdge = new int[10][10][2][][];
	int[][][][][] leftEdge = new int[10][10][2][][];

	int[][] solution = new int[10][1024];
	int[][] answer = new int[10][1024];
	int[][] f = new int[10][1024];

	int rS = 0;
	int lS = 0;

	public static int[][] orderedMoves = new int[][] { { 1, -2 }, { -1, -2 }, { 2, -1 }, { -2, -1 }, { 2, 1 },
			{ -2, 1 }, { 1, 2 }, { -1, 2 } };

	void prebuildFor6() {
		pass[6][6][0] = new int[][] {
			{-10, -13, -4, 8, -24, 10},
			{-3, 1, -11, -22, -5, 7},
			{-12, -9, -14, -25, 9, -23},
			{2, -2, -21, -18, 6, -6},
			{-20, -15, -8, 4, -26, -17},
			{-1, 3, -19, -16, -7, 5}
			};

			leftEdge[6][5][0] = new int[][] {
			{7, 18, 27, 10, 1},
			{26, 11, 8, 17, 28},
			{19, 6, 29, 2, 9},
			{12, 25, 14, 21, 16},
			{5, 20, 23, 30, 3},
			{24, 13, 4, 15, 22}
			};

			leftEdge[6][5][1] = new int[][] {
			{23, 2, 11, 14, 21},
			{10, 19, 22, 1, 12},
			{3, 24, 13, 20, 15},
			{18, 9, 26, 29, 6},
			{25, 4, 7, 16, 27},
			{8, 17, 28, 5, 30}
			};
			rightEdge[6][5][0] = new int[][] {
			{30, 5, 28, 17, 8},
			{27, 16, 7, 4, 25},
			{6, 29, 26, 9, 18},
			{15, 20, 13, 24, 3},
			{12, 1, 22, 19, 10},
			{21, 14, 11, 2, 23}
			};

			rightEdge[6][5][1] = new int[][] {
			{16, 13, 4, 29, 18},
			{3, 30, 17, 14, 5},
			{12, 15, 26, 19, 28},
			{25, 2, 23, 6, 9},
			{22, 11, 8, 27, 20},
			{1, 24, 21, 10, 7}
			};
			leftEdge[6][6][0] = new int[][] {
			{12, 7, 34, 27, 10, 1},
			{33, 28, 11, 8, 21, 26},
			{6, 13, 32, 35, 2, 9},
			{31, 16, 29, 20, 25, 22},
			{14, 5, 18, 23, 36, 3},
			{17, 30, 15, 4, 19, 24}
			};

			leftEdge[6][6][1] = new int[][] {
			{10, 27, 8, 23, 12, 25},
			{7, 20, 11, 26, 1, 22},
			{28, 9, 34, 21, 24, 13},
			{19, 6, 17, 30, 33, 2},
			{16, 29, 4, 35, 14, 31},
			{5, 18, 15, 32, 3, 36}
			};
			rightEdge[6][6][0] = new int[][] {
			{36, 3, 32, 15, 18, 5},
			{31, 14, 35, 4, 29, 16},
			{2, 33, 30, 17, 6, 19},
			{13, 24, 21, 34, 9, 28},
			{22, 1, 26, 11, 20, 7},
			{25, 12, 23, 8, 27, 10}
			};

			rightEdge[6][6][1] = new int[][] {
			{24, 19, 4, 15, 30, 17},
			{3, 36, 23, 18, 5, 14},
			{22, 25, 20, 29, 16, 31},
			{9, 2, 35, 32, 13, 6},
			{26, 21, 8, 11, 28, 33},
			{1, 10, 27, 34, 7, 12}
			};
			leftEdge[6][7][0] = new int[][] {
			{11, 14, 19, 30, 33, 16, 1},
			{20, 31, 12, 15, 18, 29, 34},
			{13, 10, 39, 32, 35, 2, 17},
			{24, 21, 36, 41, 38, 5, 28},
			{9, 40, 23, 26, 7, 42, 3},
			{22, 25, 8, 37, 4, 27, 6}
			};

			leftEdge[6][7][1] = new int[][] {
			{37, 16, 21, 8, 29, 10, 19},
			{22, 7, 36, 17, 20, 1, 28},
			{15, 38, 23, 30, 9, 18, 11},
			{6, 33, 40, 35, 24, 27, 2},
			{39, 14, 31, 4, 41, 12, 25},
			{32, 5, 34, 13, 26, 3, 42}
			};
			rightEdge[6][7][0] = new int[][] {
			{42, 3, 32, 13, 26, 5, 36},
			{33, 14, 27, 4, 35, 12, 25},
			{2, 41, 34, 31, 24, 37, 6},
			{15, 28, 23, 40, 9, 18, 11},
			{22, 1, 30, 17, 20, 7, 38},
			{29, 16, 21, 8, 39, 10, 19}
			};

			rightEdge[6][7][1] = new int[][] {
			{6, 9, 4, 17, 40, 11, 32},
			{3, 42, 7, 10, 33, 18, 39},
			{8, 5, 16, 41, 38, 31, 12},
			{23, 2, 37, 34, 25, 28, 19},
			{36, 15, 24, 21, 30, 13, 26},
			{1, 22, 35, 14, 27, 20, 29}
			};
			leftEdge[6][8][0] = new int[][] {
			{40, 11, 44, 19, 32, 13, 16, 1},
			{45, 20, 39, 12, 43, 18, 31, 14},
			{10, 41, 46, 33, 38, 15, 2, 17},
			{21, 24, 37, 42, 47, 28, 5, 30},
			{36, 9, 26, 23, 34, 7, 48, 3},
			{25, 22, 35, 8, 27, 4, 29, 6}
			};

			leftEdge[6][8][1] = new int[][] {
			{8, 11, 24, 39, 32, 13, 22, 19},
			{25, 38, 9, 12, 23, 20, 1, 14},
			{10, 7, 44, 33, 40, 31, 18, 21},
			{37, 26, 41, 46, 43, 34, 15, 2},
			{6, 45, 28, 35, 4, 47, 30, 17},
			{27, 36, 5, 42, 29, 16, 3, 48}
			};
			rightEdge[6][8][0] = new int[][] {
			{48, 3, 20, 43, 28, 5, 18, 15},
			{21, 38, 45, 4, 19, 16, 29, 6},
			{2, 47, 42, 39, 44, 27, 14, 17},
			{37, 22, 35, 46, 11, 40, 7, 30},
			{34, 1, 24, 41, 32, 9, 26, 13},
			{23, 36, 33, 10, 25, 12, 31, 8}
			};

			rightEdge[6][8][1] = new int[][] {
			{6, 9, 4, 19, 46, 11, 32, 21},
			{3, 48, 7, 10, 33, 20, 41, 12},
			{8, 5, 18, 47, 40, 45, 22, 31},
			{27, 2, 39, 36, 29, 34, 13, 42},
			{38, 17, 28, 25, 44, 15, 30, 23},
			{1, 26, 37, 16, 35, 24, 43, 14}
			};
	}

	void prebuildFor7() {
		pass[7][6][0] = new int[][] { { 1, -9, -12, 12, -18, -1 }, { -11, 13, -19, -22, -13, 11 },
				{ -8, 2, -10, -17, -2, -21 }, { 14, -16, -23, -20, 10, -14 }, { 3, -7, 15, -15, 7, -3 },
				{ 16, -24, -5, 5, 18, 9 }, { -6, 4, 17, 8, -4, 6 } };

		pass[7][6][1] = new int[][] { { 21, 12, 19, 8, 23, 10 }, { 18, 1, 22, 11, -16, 7 }, { 13, 20, -15, -8, 9, 24 },
				{ 2, 17, -4, -11, 6, -9 }, { -3, 14, -7, -14, 25, -12 }, { 16, 3, -2, -5, -10, 5 },
				{ -1, -6, 15, 4, -13, 26 } };
		leftEdge[7][5][0] = new int[][] { { 27, 30, 19, 8, 1 }, { 20, 7, 28, 33, 18 }, { 29, 26, 31, 2, 9 },
				{ 6, 21, 34, 17, 32 }, { 25, 14, 23, 10, 3 }, { 22, 5, 12, 35, 16 }, { 13, 24, 15, 4, 11 } };

		leftEdge[7][5][1] = new int[][] { { 19, 2, 23, 12, 21 }, { 32, 11, 20, 1, 24 }, { 3, 18, 31, 22, 13 },
				{ 10, 33, 14, 25, 30 }, { 17, 4, 29, 34, 7 }, { 28, 9, 6, 15, 26 }, { 5, 16, 27, 8, 35 } };
		rightEdge[7][5][0] = new int[][] { { 35, 18, 33, 8, 5 }, { 32, 9, 6, 17, 30 }, { 19, 34, 31, 4, 7 },
				{ 10, 25, 14, 29, 16 }, { 13, 20, 11, 24, 3 }, { 26, 1, 22, 15, 28 }, { 21, 12, 27, 2, 23 } };

		rightEdge[7][5][1] = new int[][] { { 17, 20, 7, 34, 15 }, { 8, 35, 16, 19, 6 }, { 21, 18, 25, 14, 33 },
				{ 24, 9, 22, 5, 26 }, { 29, 2, 11, 32, 13 }, { 10, 23, 30, 27, 4 }, { 1, 28, 3, 12, 31 } };
		leftEdge[7][7][0] = new int[][] { { 9, 12, 23, 30, 39, 14, 1 }, { 22, 43, 10, 13, 24, 31, 40 },
				{ 11, 8, 29, 38, 41, 2, 15 }, { 44, 21, 42, 25, 48, 37, 32 }, { 7, 28, 47, 36, 33, 16, 3 },
				{ 20, 45, 26, 5, 18, 49, 34 }, { 27, 6, 19, 46, 35, 4, 17 } };

		leftEdge[7][7][1] = new int[][] { { 45, 28, 21, 8, 17, 10, 19 }, { 22, 7, 46, 39, 20, 1, 16 },
				{ 29, 44, 27, 42, 9, 18, 11 }, { 6, 23, 40, 47, 38, 15, 2 }, { 33, 30, 43, 26, 41, 12, 37 },
				{ 24, 5, 32, 35, 48, 3, 14 }, { 31, 34, 25, 4, 13, 36, 49 } };
		rightEdge[7][7][0] = new int[][] { { 49, 18, 41, 4, 27, 16, 13 }, { 40, 3, 28, 17, 14, 5, 26 },
				{ 19, 48, 39, 42, 33, 12, 15 }, { 2, 29, 34, 47, 38, 25, 6 }, { 35, 20, 43, 32, 9, 46, 11 },
				{ 30, 1, 22, 37, 44, 7, 24 }, { 21, 36, 31, 8, 23, 10, 45 } };

		rightEdge[7][7][1] = new int[][] { { 9, 12, 7, 38, 29, 14, 27 }, { 6, 49, 10, 13, 26, 37, 30 },
				{ 11, 8, 43, 48, 39, 28, 15 }, { 42, 5, 40, 25, 44, 31, 36 }, { 23, 2, 45, 34, 47, 16, 19 },
				{ 4, 41, 24, 21, 18, 35, 32 }, { 1, 22, 3, 46, 33, 20, 17 } };
	}

	void prebuildFor8() {
		pass[8][6][0] = new int[][] {
			{-20, 8, -22, -7, -18, 10},
			{-23, 1, -19, 9, -35, -6},
			{7, -21, -34, -31, -8, -17},
			{2, -24, -15, -36, -5, -32},
			{-14, 6, -30, -33, -16, -9},
			{-25, 3, -37, -10, -29, -4},
			{5, -13, -2, -27, -38, -11},
			{-1, -26, 4, -12, -3, -28}
			};

			leftEdge[8][5][0] = new int[][] {
			{13, 34, 9, 24, 1},
			{10, 23, 12, 33, 8},
			{31, 14, 35, 2, 25},
			{22, 11, 32, 7, 36},
			{15, 30, 37, 26, 3},
			{38, 21, 4, 17, 6},
			{29, 16, 19, 40, 27},
			{20, 39, 28, 5, 18}
			};

			leftEdge[8][5][1] = new int[][] {
			{21, 2, 25, 10, 23},
			{32, 11, 22, 1, 26},
			{3, 20, 33, 24, 9},
			{12, 31, 38, 27, 34},
			{19, 4, 35, 8, 37},
			{30, 13, 28, 39, 16},
			{5, 18, 15, 36, 7},
			{14, 29, 6, 17, 40}
			};
			rightEdge[8][5][0] = new int[][] {
			{40, 29, 6, 17, 14},
			{7, 18, 15, 36, 5},
			{30, 39, 28, 13, 16},
			{19, 8, 35, 4, 37},
			{34, 31, 38, 27, 12},
			{9, 20, 33, 24, 3},
			{32, 1, 22, 11, 26},
			{21, 10, 25, 2, 23}
			};

			rightEdge[8][5][1] = new int[][] {
			{24, 9, 18, 7, 22},
			{19, 40, 23, 36, 17},
			{10, 25, 8, 21, 6},
			{39, 20, 35, 16, 37},
			{26, 11, 38, 5, 34},
			{31, 2, 13, 28, 15},
			{12, 27, 30, 33, 4},
			{1, 32, 3, 14, 29}
			};
			leftEdge[8][6][0] = new int[][] {
			{26, 41, 32, 9, 24, 1},
			{33, 10, 25, 42, 37, 8},
			{44, 27, 40, 31, 2, 23},
			{11, 34, 43, 36, 7, 38},
			{28, 45, 30, 39, 22, 3},
			{15, 12, 35, 4, 19, 6},
			{46, 29, 14, 17, 48, 21},
			{13, 16, 47, 20, 5, 18}
			};

			leftEdge[8][6][1] = new int[][] {
			{10, 25, 40, 29, 8, 27},
			{39, 36, 9, 26, 1, 30},
			{24, 11, 38, 41, 28, 7},
			{37, 42, 35, 22, 31, 2},
			{12, 23, 14, 43, 6, 21},
			{15, 46, 17, 34, 3, 32},
			{18, 13, 44, 47, 20, 5},
			{45, 16, 19, 4, 33, 48}
			};
			rightEdge[8][6][0] = new int[][] {
			{48, 33, 4, 19, 16, 45},
			{5, 20, 47, 44, 35, 18},
			{32, 3, 34, 17, 46, 15},
			{21, 6, 43, 40, 23, 36},
			{2, 31, 22, 37, 14, 41},
			{7, 28, 39, 42, 11, 24},
			{30, 1, 26, 9, 38, 13},
			{27, 8, 29, 12, 25, 10}
			};

			rightEdge[8][6][1] = new int[][] {
			{28, 7, 30, 39, 26, 9},
			{31, 48, 27, 8, 35, 38},
			{6, 29, 40, 37, 10, 25},
			{41, 32, 47, 34, 43, 36},
			{46, 5, 42, 13, 24, 11},
			{17, 2, 33, 44, 21, 14},
			{4, 45, 16, 19, 12, 23},
			{1, 18, 3, 22, 15, 20}
			};
			leftEdge[8][7][0] = new int[][] {
			{11, 26, 21, 50, 9, 24, 1},
			{20, 29, 10, 25, 22, 49, 8},
			{27, 12, 53, 48, 51, 2, 23},
			{30, 19, 28, 37, 54, 7, 44},
			{13, 38, 47, 52, 45, 36, 3},
			{18, 31, 16, 55, 4, 43, 6},
			{39, 14, 33, 46, 41, 56, 35},
			{32, 17, 40, 15, 34, 5, 42}
			};

			leftEdge[8][7][1] = new int[][] {
			{33, 10, 29, 52, 25, 8, 27},
			{30, 45, 32, 9, 28, 1, 24},
			{11, 34, 53, 44, 51, 26, 7},
			{46, 31, 50, 41, 48, 23, 2},
			{35, 12, 47, 54, 43, 6, 39},
			{18, 15, 42, 49, 40, 3, 22},
			{13, 36, 17, 20, 55, 38, 5},
			{16, 19, 14, 37, 4, 21, 56}
			};
			rightEdge[8][7][0] = new int[][] {
			{56, 21, 4, 37, 14, 19, 16},
			{5, 38, 55, 20, 17, 36, 13},
			{22, 3, 48, 41, 46, 15, 18},
			{39, 6, 45, 54, 49, 12, 35},
			{2, 23, 40, 47, 42, 31, 50},
			{7, 26, 53, 44, 51, 34, 11},
			{24, 1, 28, 9, 32, 43, 30},
			{27, 8, 25, 52, 29, 10, 33}
			};

			rightEdge[8][7][1] = new int[][] {
			{26, 7, 24, 45, 28, 9, 32},
			{23, 56, 27, 8, 31, 46, 29},
			{6, 25, 52, 49, 44, 33, 10},
			{51, 22, 55, 40, 53, 30, 47},
			{38, 5, 50, 43, 48, 11, 34},
			{21, 2, 39, 54, 41, 14, 17},
			{4, 37, 42, 19, 16, 35, 12},
			{1, 20, 3, 36, 13, 18, 15}
			};
			leftEdge[8][8][0] = new int[][] {
			{24, 11, 40, 55, 26, 9, 38, 1},
			{41, 60, 25, 10, 39, 54, 27, 8},
			{12, 23, 56, 53, 62, 47, 2, 37},
			{59, 42, 61, 48, 57, 52, 7, 28},
			{22, 13, 58, 51, 46, 63, 36, 3},
			{43, 16, 49, 20, 33, 4, 29, 6},
			{14, 21, 18, 45, 50, 31, 64, 35},
			{17, 44, 15, 32, 19, 34, 5, 30}
			};

			leftEdge[8][8][1] = new int[][] {
			{32, 35, 10, 25, 58, 37, 8, 23},
			{11, 26, 33, 36, 9, 24, 1, 38},
			{34, 31, 46, 57, 52, 59, 22, 7},
			{27, 12, 51, 54, 49, 56, 39, 2},
			{30, 45, 28, 47, 60, 53, 6, 21},
			{13, 16, 61, 50, 55, 48, 3, 40},
			{44, 29, 18, 15, 42, 63, 20, 5},
			{17, 14, 43, 62, 19, 4, 41, 64}
			};
			rightEdge[8][8][0] = new int[][] {
			{64, 35, 4, 19, 56, 33, 14, 17},
			{5, 20, 63, 34, 15, 18, 47, 32},
			{36, 3, 60, 57, 62, 55, 16, 13},
			{21, 6, 51, 54, 59, 46, 31, 48},
			{2, 37, 58, 61, 52, 49, 12, 27},
			{7, 22, 53, 50, 45, 28, 41, 30},
			{38, 1, 24, 9, 40, 43, 26, 11},
			{23, 8, 39, 44, 25, 10, 29, 42}
			};

			rightEdge[8][8][1] = new int[][] {
			{22, 7, 36, 57, 24, 9, 34, 31},
			{37, 64, 23, 8, 35, 32, 25, 10},
			{6, 21, 58, 61, 56, 45, 30, 33},
			{63, 38, 55, 48, 53, 60, 11, 26},
			{20, 5, 62, 59, 46, 27, 44, 29},
			{39, 2, 47, 54, 49, 52, 15, 12},
			{4, 19, 50, 41, 14, 17, 28, 43},
			{1, 40, 3, 18, 51, 42, 13, 16}
			};
	}

	void prebuildFor9() {
		pass[9][6][0] = new int[][] { { 1, 14, -24, 18, 11, -1 }, { -25, 19, 12, 15, -17, 17 },
				{ 13, 2, -26, -23, -2, 10 }, { 20, -20, -3, -18, 16, -16 }, { 3, -11, -22, -27, 9, -5 },
				{ -21, 21, -19, -4, -15, -28 }, { -10, 4, -12, -29, -6, 8 }, { 22, -30, 6, -8, 24, -14 },
				{ 5, -9, 23, -13, 7, -7 } };

		pass[9][6][1] = new int[][] { { -5, 14, -29, 10, -7, 12 }, { -30, 1, -6, 13, -34, 9 },
				{ 15, -4, -31, -28, 11, -8 }, { 2, -23, -10, -17, 8, -33 }, { -3, 16, -27, -32, -9, -16 },
				{ -22, 3, -24, -11, -18, 7 }, { 17, -2, -21, -26, -15, -12 }, { 4, -25, -14, 19, 6, -19 },
				{ -1, 18, 5, -20, -13, 20 } };
		leftEdge[9][5][0] = new int[][] { { 29, 14, 33, 24, 1 }, { 34, 23, 30, 13, 32 }, { 15, 28, 35, 2, 25 },
				{ 22, 41, 26, 31, 12 }, { 27, 16, 43, 36, 3 }, { 42, 21, 40, 11, 44 }, { 17, 8, 19, 4, 37 },
				{ 20, 39, 6, 45, 10 }, { 7, 18, 9, 38, 5 } };

		leftEdge[9][5][1] = new int[][] { { 37, 2, 11, 20, 39 }, { 12, 21, 38, 1, 10 }, { 3, 36, 23, 40, 19 },
				{ 22, 13, 32, 9, 24 }, { 35, 4, 41, 18, 33 }, { 14, 31, 34, 25, 8 }, { 5, 42, 27, 30, 17 },
				{ 28, 15, 44, 7, 26 }, { 43, 6, 29, 16, 45 } };
		rightEdge[9][5][0] = new int[][] { { 45, 16, 29, 6, 31 }, { 26, 7, 32, 15, 28 }, { 17, 44, 27, 30, 5 },
				{ 8, 25, 36, 33, 14 }, { 37, 18, 43, 4, 35 }, { 24, 9, 34, 13, 22 }, { 19, 38, 23, 42, 3 },
				{ 10, 1, 40, 21, 12 }, { 39, 20, 11, 2, 41 } };

		rightEdge[9][5][1] = new int[][] { { 35, 8, 17, 42, 37 }, { 18, 45, 36, 7, 16 }, { 9, 34, 41, 38, 43 },
				{ 40, 19, 44, 15, 6 }, { 33, 10, 39, 24, 31 }, { 20, 27, 32, 5, 14 }, { 11, 2, 25, 30, 23 },
				{ 26, 21, 28, 13, 4 }, { 1, 12, 3, 22, 29 } };
		leftEdge[9][7][0] = new int[][] { { 23, 26, 43, 12, 55, 28, 1 }, { 42, 11, 24, 27, 44, 13, 54 },
				{ 25, 22, 49, 56, 53, 2, 29 }, { 10, 41, 52, 59, 50, 45, 14 }, { 21, 36, 61, 48, 57, 30, 3 },
				{ 40, 9, 58, 51, 60, 15, 46 }, { 35, 20, 37, 62, 47, 4, 31 }, { 8, 39, 18, 33, 6, 63, 16 },
				{ 19, 34, 7, 38, 17, 32, 5 } };

		leftEdge[9][7][1] = new int[][] { { 31, 14, 45, 58, 29, 12, 9 }, { 44, 47, 30, 13, 10, 1, 28 },
				{ 15, 32, 57, 46, 59, 8, 11 }, { 48, 43, 54, 51, 56, 27, 2 }, { 33, 16, 49, 60, 53, 22, 7 },
				{ 42, 37, 52, 55, 50, 3, 26 }, { 17, 34, 61, 40, 23, 6, 21 }, { 38, 41, 36, 19, 62, 25, 4 },
				{ 35, 18, 39, 24, 5, 20, 63 } };
		rightEdge[9][7][0] = new int[][] { { 63, 32, 5, 16, 47, 30, 27 }, { 4, 17, 62, 31, 28, 15, 46 },
				{ 33, 6, 57, 48, 61, 26, 29 }, { 18, 3, 60, 53, 58, 45, 14 }, { 7, 34, 49, 56, 51, 40, 25 },
				{ 2, 19, 52, 59, 54, 13, 44 }, { 35, 8, 55, 50, 41, 24, 39 }, { 20, 1, 10, 37, 22, 43, 12 },
				{ 9, 36, 21, 42, 11, 38, 23 } };

		rightEdge[9][7][1] = new int[][] { { 55, 22, 51, 62, 15, 20, 17 }, { 50, 63, 54, 21, 18, 47, 14 },
				{ 23, 56, 49, 52, 61, 16, 19 }, { 6, 53, 60, 57, 48, 13, 46 }, { 59, 24, 7, 42, 45, 30, 39 },
				{ 8, 5, 58, 35, 40, 43, 12 }, { 25, 2, 41, 44, 31, 38, 29 }, { 4, 9, 34, 27, 36, 11, 32 },
				{ 1, 26, 3, 10, 33, 28, 37 } };
	}

	{
		prebuildFor6();
		prebuildFor7();
		prebuildFor8();
		prebuildFor9();
	}

	void put(int x, int y, int[][] part, int toAdd, int oddity) {
		for (int i = 0; i < part.length; i++) {
			for (int j = 0; j < part[i].length; j++) {
				answer[x + i][y + j] = part[i][j];
				if (oddity == 1) {
					answer[x + i][y + j] = -answer[x + i][y + j];
				}
			}
		}
	}

	void reorder(int w, int h, int x, int y, boolean increase, int current) {
		if (x < 0 || y < 0)
			return;
		f[x][y] = 1;
		solution[x][y] = current;
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (increase) {
				if (answer[nx][ny] == answer[x][y] + 1) {
					reorder(w, h, nx, ny, increase, current + 1);
					return;
				}
			} else {
				if (answer[nx][ny] == answer[x][y] - 1) {
					reorder(w, h, nx, ny, increase, current + 1);
					return;
				}
			}
		}
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (answer[nx][ny] == 1 && ny <= h - rS) {
				reorder(w, h, nx, ny, increase, current + 1);
				return;
			}
			if (answer[nx][ny] == rS * w && ny >= lS) {
				reorder(w, h, nx, ny, false, current + 1);
				return;
			}
		}

		int mn = 1000000;
		int mnx = -1;
		int mny = -1;
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (answer[nx][ny] > 0)
				continue;
			if (answer[nx][ny] == -1) {
				reorder(w, h, nx, ny, false, current + 1);
				return;
			}
			if (mn > answer[nx][ny]) {
				mn = answer[nx][ny];
				mnx = nx;
				mny = ny;
			}
		}

		reorder(w, h, mnx, mny, true, current + 1);

	}

	int[][] solveOdd(int w, int h) {
		int leftSize = 0, rightSize = 0;
		if (h - 5 - 5 >= 0 && (h - 5 - 5) % 6 == 0) {
			leftSize = 5;
			rightSize = 5;
		}
		if (h - 7 - 5 >= 0 && (h - 7 - 5) % 6 == 0) {
			leftSize = 7;
			rightSize = 5;
		}
		if (h - 7 - 7 >= 0 && (h - 7 - 7) % 6 == 0) {
			leftSize = 7;
			rightSize = 7;
		}

		rS = rightSize;
		lS = leftSize;

		int oddity = 1;
		int count = (h - leftSize - rightSize) / 6;
		put(0, 0, leftEdge[w][leftSize][0], 0, 0);
		for (int i = 0; i < count; i++) {
			put(0, leftSize + i * 6, pass[w][6][oddity], leftSize * w + w * 6 * i, oddity);
			oddity = 1 - oddity;
		}
		put(0, h - rightSize, rightEdge[w][rightSize][oddity], 0, 0);

		int sx = 0, sy = 0;

		for (int j = 0; j < h; j++) {
			for (int i = 0; i < w; i++) {
				if (answer[i][j] == 1) {
					sx = i;
					sy = j;
					break;
				}
			}
			if (sx != 0 || sy != 0)
				break;
		}
		// output(w, h, answer);
		reorder(w, h, sx, sy, true, 1);
		//output(w, h, solution);
		return solution;
	}
	
	void reorderEven(int w, int h, int x, int y, boolean increase, int current) {
		if (x < 0 || y < 0)
			return;
		
		f[x][y] = 1;
		solution[x][y] = current;
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (increase) {
				if (answer[nx][ny] == answer[x][y] + 1) {
					reorderEven(w, h, nx, ny, increase, current + 1);
					return;
				}
			} else {
				if (answer[nx][ny] == answer[x][y] - 1) {
					reorderEven(w, h, nx, ny, increase, current + 1);
					return;
				}
			}
		}
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (answer[nx][ny] == -1 && ny <= h - rS) {
				reorderEven(w, h, nx, ny, false, current + 1);
				return;
			}
			if (answer[nx][ny] ==  1 && ny <= h - rS) {
				reorderEven(w, h, nx, ny, true, current + 1);
				return;
			}
			if (answer[nx][ny] == 10 && (answer[x][y] == 1 || answer[x][y] == rS * w)) {
				reorderEven(w, h, nx, ny, false, current + 1);
				return;
			}
			if (answer[nx][ny] == rS * w && ny >= lS) {
				reorderEven(w, h, nx, ny, false, current + 1);
				return;
			}
		}

	}

	int[][] solveEven(int w, int h) {
		boolean found = false;
		int leftSize = 0, rightSize = 0, count = 0;
		for (int i = 0; 6 * i <= h; i++) {
			int x = h - 6 * i;
			for(int lS = 5; lS <= 8; lS++) {
				for(int rS = 5; rS <= 8; rS++) {
					if(lS + rS == x) {
						found = true;
						leftSize = lS;
						rightSize = rS;
						count = i;
						break;
					}
				}
				if(found) break;
			}
			if(found) break;
		}
		
		lS = leftSize;
		rS = rightSize;
		
		put(0, 0, leftEdge[w][leftSize][0], 0, 0);
		for (int i = 0; i < count; i++) {
			put(0, leftSize + i * 6, pass[w][6][0], leftSize * w + w * 6 * i, 0);
		}
		put(0, h - rightSize, rightEdge[w][rightSize][1], 0, 0);

		int sx = 0, sy = 0;

		for (int j = 0; j < h; j++) {
			for (int i = 0; i < w; i++) {
				if (answer[i][j] == 1) {
					sx = i;
					sy = j;
					break;
				}
			}
			if (sx != 0 || sy != 0)
				break;
		}
		
		//output(w, h, answer);
		reorderEven(w, h, sx, sy, true, 1);
		//output(w, h, solution);
		
		return solution;
	}

	public int[][] solve(int w, int h) {
		if (w % 2 == 1) {
			return solveOdd(w, h);
		} else {
			return solveEven(w, h);
		}
	}

}

public class NightmareKnightBigPrebuild {

	private final int N = 1024;
	
	public static int[][] correctOrderMoves = new int[][] {
		{2, 1},
		{2, -1},
		{-2, 1},
		{-2, -1},
		{1, 2},
		{1, -2},
		{-1, 2},
		{-1, -2}
	};

	public static int[][] moves = new int[][] {
		{2, 1},
		{2, -1},
		{-2, 1},
		{-2, -1},
		{1, 2},
		{1, -2},
		{-1, 2},
		{-1, -2}
	};

	public static int[][] corners = new int[][] {
		{1, 1},
		{1, -2},
		{-2, 1},
		{-2, -2}
	};

	int[][] parts = new int[2][N / 5];
	int n, m;
	
	int[][][] checked = new int[N / 5][N / 5][4];
	
	int[][] solution = new int[N][N];
	
	int directionChange = 0;
	
	HashMap<Integer, int[]> preb = new HashMap<Integer, int[]>();
	HashMap<Integer, int[]> prebStraight = new HashMap<Integer, int[]>();
	
	int firstCorner = 0;
	
	int[] getPb(int x1, int x2, int x3, int x4, int x5, int x6) {
		int key = x1;
		key = key * 10 + x2;
		key = key * 10 + x3;
		key = key * 10 + x4;
		key = key * 10 + x5;
		key = key * 10 + x6;
		if(!preb.containsKey(key)) return null;
		return preb.get(key);
	}
	
	void storePreb(int x1, int x2, int x3, int x4, int x5, int x6, int[] v) {
		int key = x1;
		key = key * 10 + x2;
		key = key * 10 + x3;
		key = key * 10 + x4;
		key = key * 10 + x5;
		key = key * 10 + x6;
		preb.put(key, v);
	}
	
	int[] getPbStraight(int x1, int x2) {
		int key = x1;
		key = key * 10 + x2;
		if(!prebStraight.containsKey(key)) return null;
		return prebStraight.get(key);
	}
	
	void storePrebStraight(int x1, int x2, int x3, int x4, int x5, int x6, int[] v) {
		int key = x1;
		key = key * 10 + x2;
		prebStraight.put(key, v);
	}
	
	void init() {
		storePreb(5,5,0,0,3,3,new int []{1,22,11,16,7,10,17,8,21,12,23,2,13,6,15,18,9,4,25,20,3,24,19,14,5});
		storePreb(5,5,0,0,1,3,new int []{1,24,11,16,7,12,17,8,25,10,23,2,21,6,15,18,13,4,9,20,3,22,19,14,5});
		storePreb(5,5,0,0,3,1,new int []{1,16,11,22,7,12,21,8,17,10,15,2,13,6,23,20,25,4,9,18,3,14,19,24,5});
		storePreb(5,5,0,0,1,1,new int []{1,20,11,16,7,12,25,8,21,10,19,2,17,6,15,24,13,4,9,22,3,18,23,14,5});
		storePreb(5,5,4,4,1,1,new int []{5,14,19,24,3,20,25,4,9,18,15,6,13,2,23,12,21,8,17,10,7,16,11,22,1});
		storePreb(5,5,4,4,1,3,new int []{5,24,19,14,3,18,9,4,25,20,23,6,13,2,15,10,17,8,21,12,7,22,11,16,1});
		storePreb(5,5,4,4,3,1,new int []{5,18,23,14,3,24,13,4,9,22,19,6,17,2,15,12,25,8,21,10,7,20,11,16,1});
		storePreb(5,5,4,4,3,3,new int []{5,22,19,14,3,18,13,4,9,20,23,6,21,2,15,12,17,8,25,10,7,24,11,16,1});
		storePreb(5,5,0,4,1,1,new int []{7,20,11,16,1,12,25,8,21,10,19,6,17,2,15,24,13,4,9,22,5,18,23,14,3});
		storePreb(5,5,0,4,3,3,new int []{7,22,11,16,1,10,17,8,21,12,23,6,13,2,15,18,9,4,25,20,5,24,19,14,3});
		storePreb(5,5,0,4,3,1,new int []{7,16,11,22,1,12,21,8,17,10,15,6,13,2,23,20,25,4,9,18,5,14,19,24,3});
		storePreb(5,5,0,4,1,3,new int []{7,24,11,16,1,12,17,8,25,10,23,6,21,2,15,18,13,4,9,20,5,22,19,14,3});
		storePreb(5,5,4,0,1,1,new int []{3,14,19,24,5,20,25,4,9,18,15,2,13,6,23,12,21,8,17,10,1,16,11,22,7});
		storePreb(5,5,4,0,3,3,new int []{3,22,19,14,5,18,13,4,9,20,23,2,21,6,15,12,17,8,25,10,1,24,11,16,7});
		storePreb(5,5,4,0,1,3,new int []{3,24,19,14,5,18,9,4,25,20,23,2,13,6,15,10,17,8,21,12,1,22,11,16,7});
		storePreb(5,5,4,0,3,1,new int []{3,18,23,14,5,24,13,4,9,22,19,2,17,6,15,12,25,8,21,10,1,20,11,16,7});
		storePreb(5,6,0,0,3,4,new int []{1,18,11,26,7,16,10,27,8,17,12,25,19,2,21,24,15,6,28,9,4,13,30,23,3,20,29,22,5,14});
		storePreb(5,6,0,0,1,4,new int []{1,26,11,14,7,20,10,15,8,19,30,13,25,2,27,12,21,6,16,9,4,23,18,29,3,24,17,28,5,22});
		storePreb(5,6,4,5,1,1,new int []{14,5,22,29,20,3,23,30,13,4,9,28,6,15,24,21,2,19,25,12,17,8,27,10,16,7,26,11,18,1});
		storePreb(5,6,4,5,3,1,new int []{22,5,28,17,24,3,29,18,23,4,9,16,6,21,12,27,2,25,13,30,19,8,15,10,20,7,14,11,26,1});
		storePreb(5,6,0,5,1,1,new int []{20,7,14,11,26,1,13,30,19,8,15,10,6,21,12,27,2,25,29,18,23,4,9,16,22,5,28,17,24,3});
		storePreb(5,6,0,5,3,1,new int []{16,7,26,11,18,1,25,12,17,8,27,10,6,15,24,21,2,19,23,30,13,4,9,28,14,5,22,29,20,3});
		storePreb(5,6,4,0,3,4,new int []{3,24,17,28,5,22,16,9,4,23,18,29,25,2,27,12,21,6,10,15,8,19,30,13,1,26,11,14,7,20});
		storePreb(5,6,4,0,1,4,new int []{3,20,29,22,5,14,28,9,4,13,30,23,19,2,21,24,15,6,10,27,8,17,12,25,1,18,11,26,7,16});
		storePreb(5,7,0,0,3,5,new int []{1,18,27,32,23,20,11,26,5,24,19,12,31,22,17,2,33,28,21,10,13,6,25,4,15,8,35,30,3,16,7,34,29,14,9});
		storePreb(5,7,0,0,1,5,new int []{1,24,29,34,15,22,11,28,5,16,23,12,35,14,17,2,25,30,33,10,21,6,27,4,19,8,13,32,3,18,7,26,31,20,9});
		storePreb(5,7,0,0,3,1,new int []{1,24,27,32,15,22,11,26,5,16,23,12,31,14,17,2,25,28,33,10,21,6,35,4,19,8,13,30,3,18,7,34,29,20,9});
		storePreb(5,7,0,0,1,1,new int []{1,14,33,8,29,12,19,32,35,30,13,18,7,28,15,2,25,34,9,20,11,24,31,4,17,22,27,6,3,16,23,26,5,10,21});
		storePreb(5,7,4,6,1,1,new int []{9,22,33,16,7,24,3,32,35,8,23,4,15,6,21,10,29,34,17,2,25,28,31,12,19,26,5,14,11,20,27,30,13,18,1});
		storePreb(5,7,4,6,1,5,new int []{9,22,29,34,7,24,3,30,13,8,23,4,35,6,21,10,33,28,25,2,17,14,31,12,19,16,5,26,11,20,15,32,27,18,1});
		storePreb(5,7,4,6,3,1,new int []{9,22,33,28,7,24,3,34,13,8,23,4,29,6,21,10,27,32,25,2,17,14,35,12,19,16,5,30,11,20,15,26,31,18,1});
		storePreb(5,7,4,6,3,5,new int []{31,10,25,16,33,12,3,24,17,32,11,4,15,34,9,30,21,26,13,2,5,18,23,28,7,20,35,14,29,8,19,22,27,6,1});
		storePreb(5,7,0,6,1,1,new int []{11,22,15,34,29,24,1,14,35,12,23,16,5,28,21,10,33,30,25,2,17,32,13,8,19,4,27,6,9,20,31,26,7,18,3});
		storePreb(5,7,0,6,3,5,new int []{11,22,15,32,27,24,1,14,31,12,23,16,5,26,21,10,33,28,25,2,17,30,13,8,19,4,35,6,9,20,29,34,7,18,3});
		storePreb(5,7,0,6,3,1,new int []{11,20,23,32,27,18,1,22,31,12,19,24,5,26,13,10,21,28,33,2,17,30,35,8,15,4,25,6,9,14,29,34,7,16,3});
		storePreb(5,7,0,6,1,5,new int []{29,14,23,8,21,12,1,24,7,28,13,18,35,20,15,30,25,22,9,2,11,6,27,32,17,4,19,34,31,16,5,26,33,10,3});
		storePreb(5,7,4,0,1,1,new int []{3,24,7,34,29,22,9,6,35,4,23,8,13,30,17,2,25,28,33,10,21,26,5,16,19,12,31,14,1,18,27,32,15,20,11});
		storePreb(5,7,4,0,3,5,new int []{3,24,7,28,33,22,9,6,29,4,23,8,13,34,17,2,25,32,27,10,21,30,5,16,19,12,35,14,1,18,31,26,15,20,11});
		storePreb(5,7,4,0,1,5,new int []{3,26,7,16,31,18,9,6,15,4,25,8,35,30,23,2,27,32,17,10,19,14,5,24,21,12,29,34,1,22,13,28,33,20,11});
		storePreb(5,7,4,0,3,1,new int []{3,12,33,16,25,10,31,34,15,4,11,32,17,24,5,2,13,26,21,30,9,14,35,20,7,28,23,18,1,6,27,22,19,8,29});
		storePreb(5,8,0,0,3,6,new int []{1,36,13,22,27,38,11,20,14,5,32,37,12,21,26,39,33,2,35,28,23,30,19,10,6,15,4,31,8,17,40,25,3,34,7,16,29,24,9,18});
		storePreb(5,8,0,0,1,6,new int []{1,26,13,30,35,24,11,20,14,5,34,25,12,21,40,23,27,2,29,36,31,38,19,10,6,15,4,33,8,17,22,39,3,28,7,16,37,32,9,18});
		storePreb(5,8,4,7,1,1,new int []{18,9,28,35,16,7,26,3,29,40,17,8,27,4,15,6,10,19,36,31,34,23,2,25,39,30,21,12,37,32,5,14,20,11,38,33,22,13,24,1});
		storePreb(5,8,4,7,3,1,new int []{18,9,32,37,16,7,28,3,39,22,17,8,33,4,15,6,10,19,38,31,36,29,2,27,23,40,21,12,25,34,5,14,20,11,24,35,30,13,26,1});
		storePreb(5,8,0,7,1,1,new int []{20,11,24,35,30,13,26,1,23,40,21,12,25,34,5,14,10,19,38,31,36,29,2,27,39,22,17,8,33,4,15,6,18,9,32,37,16,7,28,3});
		storePreb(5,8,0,7,3,1,new int []{20,11,28,37,22,13,26,1,29,32,21,12,27,36,5,14,10,19,30,33,38,23,2,25,31,40,17,8,35,4,15,6,18,9,34,39,16,7,24,3});
		storePreb(5,8,4,0,3,6,new int []{3,28,7,16,37,32,9,18,6,15,4,33,8,17,22,39,27,2,29,36,31,38,19,10,14,5,34,25,12,21,40,23,1,26,13,30,35,24,11,20});
		storePreb(5,8,4,0,1,6,new int []{3,30,7,16,39,34,9,18,6,15,4,33,8,17,40,35,31,2,29,38,23,26,19,10,14,5,32,27,12,21,36,25,1,28,13,22,37,24,11,20});
		storePreb(6,5,0,0,4,3,new int []{1,18,27,10,7,26,11,8,17,28,19,2,29,6,9,12,25,14,21,16,3,20,23,30,5,24,13,4,15,22});
		storePreb(6,5,0,0,4,1,new int []{1,24,21,10,7,22,11,8,27,20,25,2,23,6,9,12,15,26,19,28,3,30,17,14,5,16,13,4,29,18});
		storePreb(6,5,5,4,1,1,new int []{16,13,4,29,18,5,30,17,14,3,12,15,26,19,28,25,6,23,2,9,22,11,8,27,20,7,24,21,10,1});
		storePreb(6,5,5,4,1,3,new int []{24,13,4,15,22,5,20,23,30,3,12,25,14,21,16,19,6,29,2,9,26,11,8,17,28,7,18,27,10,1});
		storePreb(6,5,0,4,4,3,new int []{7,18,27,10,1,26,11,8,17,28,19,6,29,2,9,12,25,14,21,16,5,20,23,30,3,24,13,4,15,22});
		storePreb(6,5,0,4,4,1,new int []{7,24,21,10,1,22,11,8,27,20,25,6,23,2,9,12,15,26,19,28,5,30,17,14,3,16,13,4,29,18});
		storePreb(6,5,5,0,1,1,new int []{16,13,4,29,18,3,30,17,14,5,12,15,26,19,28,25,2,23,6,9,22,11,8,27,20,1,24,21,10,7});
		storePreb(6,5,5,0,1,3,new int []{24,13,4,15,22,3,20,23,30,5,12,25,14,21,16,19,2,29,6,9,26,11,8,17,28,1,18,27,10,7});
		storePreb(6,6,0,0,1,4,new int []{1,10,19,28,7,12,18,27,8,11,36,29,9,2,17,20,13,6,24,21,26,35,30,33,3,16,23,32,5,14,22,25,4,15,34,31});
		storePreb(6,6,0,0,4,1,new int []{1,10,27,34,7,12,26,21,8,11,28,33,9,2,35,32,13,6,22,25,20,29,16,31,3,36,23,18,5,14,24,19,4,15,30,17});
		storePreb(6,6,5,5,1,4,new int []{17,30,15,4,19,24,14,5,18,23,36,3,31,16,29,20,25,22,6,13,32,35,2,9,33,28,11,8,21,26,12,7,34,27,10,1});
		storePreb(6,6,5,5,4,1,new int []{31,34,15,4,25,22,14,5,32,23,16,3,33,30,35,26,21,24,6,13,20,17,2,9,29,36,11,8,27,18,12,7,28,19,10,1});
		storePreb(6,6,0,5,1,1,new int []{12,7,28,19,10,1,29,36,11,8,27,18,6,13,20,17,2,9,33,30,35,26,21,24,14,5,32,23,16,3,31,34,15,4,25,22});
		storePreb(6,6,0,5,4,4,new int []{12,7,34,27,10,1,33,28,11,8,21,26,6,13,32,35,2,9,31,16,29,20,25,22,14,5,18,23,36,3,17,30,15,4,19,24});
		storePreb(6,6,5,0,1,1,new int []{24,19,4,15,30,17,3,36,23,18,5,14,22,25,20,29,16,31,9,2,35,32,13,6,26,21,8,11,28,33,1,10,27,34,7,12});
		storePreb(6,6,5,0,4,4,new int []{22,25,4,15,34,31,3,16,23,32,5,14,24,21,26,35,30,33,9,2,17,20,13,6,18,27,8,11,36,29,1,10,19,28,7,12});
		storePreb(6,7,0,0,4,5,new int []{1,16,31,24,33,14,11,30,25,40,15,12,23,34,17,2,29,32,39,10,13,26,5,38,41,20,35,22,3,18,7,28,37,42,9,6,27,4,19,8,21,36});
		storePreb(6,7,0,0,4,1,new int []{1,16,33,30,19,14,11,34,29,18,15,12,31,20,17,2,35,32,39,10,13,28,5,38,41,36,21,24,3,42,7,26,23,40,9,6,27,4,37,8,25,22});
		storePreb(6,7,5,6,1,1,new int []{34,11,36,17,4,9,6,27,42,33,10,7,18,3,12,35,28,37,16,5,8,23,26,41,32,29,2,19,40,13,24,21,38,15,30,25,22,39,14,31,20,1});
		storePreb(6,7,5,6,1,5,new int []{32,11,40,17,4,9,6,39,18,33,10,7,42,3,12,31,38,41,16,5,8,19,28,25,34,37,2,23,26,13,30,21,24,15,36,29,20,27,14,35,22,1});
		storePreb(6,7,0,6,4,5,new int []{11,14,19,30,33,16,1,20,31,12,15,18,29,34,13,10,39,32,35,2,17,24,21,36,41,38,5,28,9,40,23,26,7,42,3,22,25,8,37,4,27,6});
		storePreb(6,7,0,6,4,1,new int []{11,14,39,24,31,16,1,38,25,12,15,40,23,30,13,10,37,32,29,2,17,26,35,28,41,20,5,22,9,42,33,36,7,18,3,34,27,8,19,4,21,6});
		storePreb(6,7,5,0,1,1,new int []{6,9,4,17,40,11,32,3,42,7,10,33,18,39,8,5,16,41,38,31,12,23,2,37,34,25,28,19,36,15,24,21,30,13,26,1,22,35,14,27,20,29});
		storePreb(6,7,5,0,1,5,new int []{6,9,4,17,36,11,34,3,18,7,10,33,42,27,8,5,16,37,28,35,12,19,2,29,32,41,26,23,30,15,38,21,24,13,40,1,20,31,14,39,22,25});
		storePreb(6,8,0,0,1,6,new int []{1,16,13,28,37,24,11,26,14,29,34,41,12,27,48,23,17,2,15,38,33,36,25,10,30,5,40,35,42,45,22,47,3,18,7,32,39,20,9,44,6,31,4,19,8,43,46,21});
		storePreb(6,8,0,0,4,1,new int []{1,16,13,34,19,44,11,32,14,39,18,43,12,33,20,45,17,2,15,38,35,46,31,10,40,5,42,47,28,37,24,21,3,48,7,36,23,26,9,30,6,41,4,27,8,29,22,25});
		storePreb(6,8,5,7,1,6,new int []{21,32,11,46,19,4,9,6,12,39,20,33,10,7,48,3,31,22,45,40,47,18,5,8,38,13,36,29,34,41,2,27,23,30,15,44,25,28,17,42,14,37,24,35,16,43,26,1});
		storePreb(6,8,5,7,4,1,new int []{27,30,11,42,19,4,9,6,12,37,28,31,10,7,20,3,29,26,41,36,43,18,5,8,38,13,44,47,32,35,2,21,25,48,15,40,23,46,17,34,14,39,24,45,16,33,22,1});
		storePreb(6,8,0,7,1,1,new int []{26,11,24,37,28,13,16,1,23,48,27,12,41,34,29,14,10,25,36,33,38,15,2,17,47,22,45,42,35,40,5,30,44,9,20,39,32,7,18,3,21,46,43,8,19,4,31,6});
		storePreb(6,8,0,7,4,6,new int []{40,11,44,19,32,13,16,1,45,20,39,12,43,18,31,14,10,41,46,33,38,15,2,17,21,24,37,42,47,28,5,30,36,9,26,23,34,7,48,3,25,22,35,8,27,4,29,6});
		storePreb(6,8,5,0,1,1,new int []{6,9,4,19,46,11,32,21,3,48,7,10,33,20,41,12,8,5,18,47,40,45,22,31,27,2,39,36,29,34,13,42,38,17,28,25,44,15,30,23,1,26,37,16,35,24,43,14});
		storePreb(6,8,5,0,4,6,new int []{6,9,4,19,42,11,30,27,3,20,7,10,31,28,35,12,8,5,18,41,36,43,26,29,21,2,37,44,47,32,13,34,38,17,46,23,40,15,48,25,1,22,39,16,45,24,33,14});
		storePreb(7,5,0,0,5,3,new int []{1,30,27,12,9,26,13,10,33,28,31,2,29,8,11,14,25,32,21,34,3,20,5,16,7,24,15,18,35,22,19,4,23,6,17});
		storePreb(7,5,0,0,1,3,new int []{1,32,29,14,11,28,15,12,35,30,33,2,31,10,13,16,27,34,23,6,3,22,7,18,9,26,17,20,5,24,21,4,25,8,19});
		storePreb(7,5,0,0,5,1,new int []{1,8,19,30,27,20,33,28,7,18,9,2,31,26,29,32,21,34,17,6,3,10,23,14,25,22,35,12,5,16,11,4,15,24,13});
		storePreb(7,5,0,0,1,1,new int []{1,8,19,30,27,20,35,28,7,18,9,2,31,26,29,32,21,34,17,6,3,10,23,14,25,22,33,12,5,16,11,4,15,24,13});
		storePreb(7,5,6,4,1,1,new int []{17,20,7,30,15,8,35,16,19,6,21,18,29,14,31,34,9,32,5,28,25,22,11,2,13,10,33,24,27,4,23,26,3,12,1});
		storePreb(7,5,6,4,1,3,new int []{29,18,7,20,27,8,25,28,35,6,17,30,19,26,21,24,9,22,5,34,31,16,11,2,13,10,23,14,33,4,15,32,3,12,1});
		storePreb(7,5,6,4,5,1,new int []{17,20,7,30,15,8,33,16,19,6,21,18,29,14,31,34,9,32,5,28,25,22,11,2,13,10,35,24,27,4,23,26,3,12,1});
		storePreb(7,5,6,4,5,3,new int []{31,18,7,22,29,8,27,30,19,6,17,32,21,28,23,26,9,24,5,20,33,16,11,2,13,10,25,14,35,4,15,34,3,12,1});
		storePreb(7,5,0,4,1,1,new int []{11,30,17,14,1,16,35,12,31,18,29,10,15,2,13,6,23,34,19,32,9,28,7,24,3,22,5,26,33,20,27,8,21,4,25});
		storePreb(7,5,0,4,5,3,new int []{27,30,19,8,1,20,7,28,33,18,29,26,31,2,9,6,21,34,17,32,25,14,23,10,3,22,5,12,35,16,13,24,15,4,11});
		storePreb(7,5,0,4,5,1,new int []{9,30,17,12,1,16,13,10,31,18,29,8,15,2,11,14,23,34,19,32,7,28,5,24,3,22,35,26,33,20,27,6,21,4,25});
		storePreb(7,5,0,4,1,3,new int []{27,30,19,8,1,20,7,28,35,18,29,26,31,2,9,6,21,34,17,32,25,14,23,10,3,22,5,12,33,16,13,24,15,4,11});
		storePreb(7,5,6,0,1,1,new int []{17,20,7,34,15,8,35,16,19,6,21,18,25,14,33,24,9,22,5,26,29,2,11,32,13,10,23,30,27,4,1,28,3,12,31});
		storePreb(7,5,6,0,5,3,new int []{17,22,7,28,15,8,27,16,19,6,23,18,21,14,29,26,9,24,5,20,33,2,11,30,13,10,25,32,35,4,1,34,3,12,31});
		storePreb(7,5,6,0,1,3,new int []{23,34,7,18,21,8,19,22,35,6,33,24,29,20,17,30,9,32,5,28,25,2,11,16,13,10,31,14,27,4,1,26,3,12,15});
		storePreb(7,5,6,0,5,1,new int []{17,20,7,24,15,8,23,16,19,6,21,18,33,14,25,34,9,22,5,32,29,2,11,26,13,10,35,28,31,4,1,30,3,12,27});
		storePreb(7,6,0,0,5,4,new int []{1,18,39,12,31,20,38,13,30,19,34,11,17,2,37,40,21,32,14,29,16,33,10,35,3,26,41,36,7,22,28,15,24,5,42,9,25,4,27,8,23,6});
		storePreb(7,6,0,0,1,4,new int []{1,18,37,12,31,20,38,13,30,19,42,11,17,2,39,36,21,32,14,29,16,33,10,41,3,26,35,40,7,22,28,15,24,5,34,9,25,4,27,8,23,6});
		storePreb(7,6,6,5,1,1,new int []{22,11,30,7,24,9,31,42,23,10,29,6,12,21,38,33,8,25,39,32,41,26,5,28,20,13,34,37,2,17,35,40,15,18,27,4,14,19,36,3,16,1});
		storePreb(7,6,6,5,5,1,new int []{14,29,32,7,16,19,31,8,15,18,33,6,28,13,30,37,20,17,9,38,27,34,5,36,12,25,10,41,2,21,39,42,23,26,35,4,24,11,40,3,22,1});
		storePreb(7,6,0,5,1,1,new int []{20,31,12,37,18,1,11,42,19,30,13,38,32,21,36,39,2,17,41,10,33,16,29,14,22,7,40,35,26,3,9,34,5,24,15,28,6,23,8,27,4,25});
		storePreb(7,6,0,5,5,1,new int []{20,31,12,39,18,1,11,34,19,30,13,38,32,21,40,37,2,17,35,10,33,16,29,14,22,7,36,41,26,3,9,42,5,24,15,28,6,23,8,27,4,25});
		storePreb(7,6,6,0,5,4,new int []{19,16,7,32,29,14,6,33,18,15,8,31,17,20,37,30,13,28,36,5,34,27,38,9,21,2,41,10,25,12,4,35,26,23,42,39,1,22,3,40,11,24});
		storePreb(7,6,6,0,1,4,new int []{9,24,7,30,11,22,6,29,10,23,42,31,25,8,33,38,21,12,28,5,26,41,32,39,17,2,37,34,13,20,4,27,18,15,40,35,1,16,3,36,19,14});
		storePreb(7,7,0,0,5,5,new int []{1,14,45,30,23,12,9,46,37,24,13,10,31,22,15,2,47,44,29,8,11,38,43,36,25,48,21,32,3,16,39,42,33,28,7,40,35,18,5,26,49,20,17,4,41,34,19,6,27});
		storePreb(7,7,0,0,1,5,new int []{1,14,43,30,23,12,9,44,31,24,13,10,49,22,15,2,45,42,29,8,11,32,41,34,25,46,21,48,3,16,37,40,35,28,7,38,33,18,5,26,47,20,17,4,39,36,19,6,27});
		storePreb(7,7,0,0,5,1,new int []{1,14,37,30,23,12,9,38,47,24,13,10,31,22,15,2,43,36,29,8,11,46,39,48,25,44,21,32,3,16,45,42,35,28,7,40,49,18,5,26,33,20,17,4,41,34,19,6,27});
		storePreb(7,7,0,0,1,1,new int []{1,14,45,30,23,12,9,44,49,24,13,10,31,22,15,2,39,46,29,8,11,36,43,48,25,38,21,32,3,16,37,40,47,28,7,42,35,18,5,26,33,20,17,4,41,34,19,6,27});
		storePreb(7,7,6,6,1,1,new int []{27,14,29,38,7,12,9,30,49,26,13,10,37,6,15,28,43,48,39,8,11,42,31,40,25,44,5,36,19,16,45,34,47,2,23,32,41,18,21,24,35,4,17,20,33,46,3,22,1});
		storePreb(7,7,6,6,1,5,new int []{27,14,29,44,7,12,9,30,41,26,13,10,49,6,15,28,45,48,43,8,11,40,31,42,25,46,5,36,19,16,47,34,37,2,23,32,39,18,21,24,35,4,17,20,33,38,3,22,1});
		storePreb(7,7,6,6,5,1,new int []{27,14,29,38,7,12,9,30,41,26,13,10,37,6,15,28,43,46,39,8,11,42,31,40,25,44,5,36,19,16,45,34,47,2,23,32,49,18,21,24,35,4,17,20,33,48,3,22,1});
		storePreb(7,7,6,6,5,5,new int []{27,14,29,38,7,12,9,30,37,26,13,10,41,6,15,28,39,46,43,8,11,36,31,44,25,40,5,42,19,16,47,34,45,2,23,32,35,18,21,24,49,4,17,20,33,48,3,22,1});
		storePreb(7,7,0,6,1,1,new int []{9,12,23,30,43,14,1,22,49,10,13,24,31,44,11,8,29,42,45,2,15,48,21,46,25,34,41,32,7,28,35,40,37,16,3,20,47,26,5,18,33,38,27,6,19,36,39,4,17});
		storePreb(7,7,0,6,5,5,new int []{9,12,23,30,39,14,1,22,43,10,13,24,31,40,11,8,29,38,41,2,15,44,21,42,25,48,37,32,7,28,47,36,33,16,3,20,45,26,5,18,49,34,27,6,19,46,35,4,17});
		storePreb(7,7,0,6,5,1,new int []{9,12,23,30,43,14,1,22,47,10,13,24,31,44,11,8,29,42,45,2,15,48,21,46,25,34,41,32,7,28,35,40,37,16,3,20,49,26,5,18,33,38,27,6,19,36,39,4,17});
		storePreb(7,7,0,6,1,5,new int []{9,12,23,30,45,14,1,22,31,10,13,24,49,44,11,8,29,46,39,2,15,32,21,38,25,48,43,36,7,28,47,40,37,16,3,20,33,26,5,18,35,42,27,6,19,34,41,4,17});
		storePreb(7,7,6,0,1,1,new int []{9,12,7,38,29,14,27,6,49,10,13,26,37,30,11,8,43,48,39,28,15,42,5,40,25,44,31,36,23,2,45,34,47,16,19,4,41,24,21,18,35,32,1,22,3,46,33,20,17});
		storePreb(7,7,6,0,5,5,new int []{9,12,7,38,29,14,27,6,37,10,13,26,41,30,11,8,39,46,43,28,15,36,5,44,25,40,31,42,23,2,47,34,45,16,19,4,35,24,21,18,49,32,1,22,3,48,33,20,17});
		storePreb(7,7,6,0,1,5,new int []{9,12,7,44,29,14,27,6,41,10,13,26,49,30,11,8,45,48,43,28,15,40,5,42,25,46,31,36,23,2,47,34,37,16,19,4,39,24,21,18,35,32,1,22,3,38,33,20,17});
		storePreb(7,7,6,0,5,1,new int []{9,12,7,38,29,14,27,6,41,10,13,26,37,30,11,8,43,46,39,28,15,42,5,40,25,44,31,36,23,2,45,34,47,16,19,4,49,24,21,18,35,32,1,22,3,48,33,20,17});
		storePreb(7,8,0,0,5,6,new int []{1,48,17,46,39,10,15,12,18,41,38,51,16,13,34,9,49,2,47,40,45,36,11,14,42,19,50,37,52,33,8,35,3,22,53,44,55,26,31,28,20,43,24,5,32,29,56,7,23,4,21,54,25,6,27,30});
		storePreb(7,8,0,0,1,6,new int []{1,48,17,40,55,10,15,12,18,39,42,45,16,13,56,9,49,2,47,54,41,44,11,14,38,19,50,43,46,35,8,27,3,22,53,36,51,28,33,30,20,37,24,5,34,31,26,7,23,4,21,52,25,6,29,32});
		storePreb(7,8,6,7,1,1,new int []{28,51,14,45,26,7,12,9,15,56,27,50,13,10,25,6,52,29,44,55,46,49,8,11,37,16,53,48,33,42,5,24,30,19,38,43,54,47,2,41,17,36,21,32,39,34,23,4,20,31,18,35,22,3,40,1});
		storePreb(7,8,6,7,5,1,new int []{28,39,14,53,26,7,12,9,15,42,27,38,13,10,25,6,40,29,54,45,52,37,8,11,43,16,41,50,33,46,5,24,30,19,44,55,36,51,2,47,17,56,21,32,49,34,23,4,20,31,18,35,22,3,48,1});
		storePreb(7,8,0,7,1,1,new int []{12,15,10,51,44,17,38,1,9,56,13,16,39,36,43,18,14,11,50,55,52,45,2,37,27,8,53,46,35,40,19,42,30,33,28,49,54,47,22,3,7,26,31,34,5,24,41,20,32,29,6,25,48,21,4,23});
		storePreb(7,8,0,7,5,1,new int []{12,15,10,35,30,17,32,1,9,36,13,16,41,34,29,18,14,11,46,39,52,31,2,33,37,8,51,42,47,40,19,28,50,45,38,55,26,53,22,3,7,56,43,48,5,24,27,20,44,49,6,25,54,21,4,23});
		storePreb(7,8,6,0,5,6,new int []{9,12,7,26,53,14,35,28,6,25,10,13,36,27,42,15,11,8,45,52,43,54,29,34,24,5,48,37,46,33,16,41,49,2,51,44,55,40,19,30,4,23,38,47,32,21,56,17,1,50,3,22,39,18,31,20});
		storePreb(7,8,6,0,1,6,new int []{9,12,7,26,49,14,35,28,6,25,10,13,36,27,56,15,11,8,53,50,55,48,29,34,24,5,46,37,52,33,16,41,45,2,51,54,47,42,19,30,4,23,38,43,32,21,40,17,1,44,3,22,39,18,31,20});
		storePreb(8,5,0,0,6,3,new int []{1,20,9,36,31,10,37,32,21,8,19,2,35,30,33,28,11,38,7,22,3,18,29,34,39,12,27,14,23,6,17,4,25,40,15,26,13,16,5,24});
		storePreb(8,5,0,0,6,1,new int []{1,34,9,20,17,10,21,18,37,8,35,2,33,16,19,22,11,36,7,38,3,28,39,32,15,12,23,4,27,6,29,40,25,14,31,24,13,30,5,26});
		storePreb(8,5,7,4,1,1,new int []{24,9,18,7,22,19,40,23,30,17,10,25,8,21,6,39,20,31,16,29,26,11,28,5,32,35,38,13,2,15,12,27,36,33,4,37,34,3,14,1});
		storePreb(8,5,7,4,1,3,new int []{18,37,30,7,20,31,8,19,40,29,38,17,36,21,6,9,32,39,28,35,16,27,34,5,22,33,10,25,2,13,26,15,12,23,4,11,24,3,14,1});
		storePreb(8,5,0,4,6,3,new int []{13,34,9,24,1,10,23,12,33,8,31,14,35,2,25,22,11,32,7,36,15,30,37,26,3,38,21,4,17,6,29,16,19,40,27,20,39,28,5,18});
		storePreb(8,5,0,4,6,1,new int []{31,20,9,36,1,8,37,32,21,10,19,30,35,2,33,28,7,38,11,22,39,18,29,34,3,6,27,14,23,12,17,40,25,4,15,26,5,16,13,24});
		storePreb(8,5,7,0,1,1,new int []{24,9,18,7,22,19,40,23,36,17,10,25,8,21,6,39,20,35,16,37,26,11,38,5,34,31,2,13,28,15,12,27,30,33,4,1,32,3,14,29});
		storePreb(8,5,7,0,1,3,new int []{24,37,16,7,26,15,8,25,40,17,38,23,36,27,6,9,14,39,18,35,22,31,10,5,28,13,2,29,34,19,30,21,32,11,4,1,12,3,20,33});
		storePreb(8,6,0,0,1,4,new int []{1,12,35,32,9,14,34,25,10,13,48,31,11,2,33,36,15,8,24,39,26,47,30,37,3,20,41,38,7,16,40,23,46,27,42,29,19,4,21,44,17,6,22,45,18,5,28,43});
		storePreb(8,6,0,0,6,1,new int []{1,24,9,32,41,26,8,37,42,25,10,33,23,2,31,40,27,44,38,7,36,43,34,11,3,22,39,30,45,28,6,19,4,35,12,15,21,48,17,14,29,46,18,5,20,47,16,13});
		storePreb(8,6,7,5,1,4,new int []{9,26,39,30,7,28,38,35,8,27,48,31,25,10,37,40,29,6,36,43,34,47,32,41,11,24,13,42,5,46,14,21,44,33,2,17,23,12,19,16,45,4,20,15,22,3,18,1});
		storePreb(8,6,7,5,6,1,new int []{9,44,17,38,7,40,16,35,8,41,18,37,45,10,43,36,39,6,34,15,46,23,42,19,11,24,33,20,5,22,14,27,12,47,2,31,25,48,29,32,21,4,28,13,26,3,30,1});
		storePreb(8,6,0,5,1,1,new int []{14,9,32,35,12,1,31,48,13,10,25,34,8,15,36,33,2,11,37,30,47,26,39,24,16,7,38,41,20,3,29,42,27,46,23,40,6,17,44,21,4,19,43,28,5,18,45,22});
		storePreb(8,6,0,5,6,4,new int []{26,41,32,9,24,1,33,10,25,42,37,8,44,27,40,31,2,23,11,34,43,36,7,38,28,45,30,39,22,3,15,12,35,4,19,6,46,29,14,17,48,21,13,16,47,20,5,18});
		storePreb(8,6,7,0,1,1,new int []{28,7,30,39,26,9,31,48,27,8,35,38,6,29,40,37,10,25,41,32,47,34,43,36,46,5,42,13,24,11,17,2,33,44,21,14,4,45,16,19,12,23,1,18,3,22,15,20});
		storePreb(8,6,7,0,6,4,new int []{40,7,38,17,44,9,37,18,41,8,35,16,6,39,36,43,10,45,19,42,23,46,15,34,22,5,20,33,24,11,31,2,47,12,27,14,4,21,32,29,48,25,1,30,3,26,13,28});
		storePreb(8,7,0,0,6,5,new int []{1,18,43,34,11,16,13,44,35,50,17,14,33,10,19,2,45,42,51,12,15,36,47,52,49,54,9,32,3,20,37,46,41,28,55,38,23,48,53,6,31,8,21,4,25,40,29,56,27,24,39,22,5,26,7,30});
		storePreb(8,7,0,0,6,1,new int []{1,24,9,50,21,26,11,8,49,22,25,10,29,20,23,2,51,48,53,12,27,44,7,54,37,28,19,30,3,36,45,52,47,38,13,6,43,4,55,16,31,18,35,56,41,46,33,14,39,42,5,34,15,40,17,32});
		storePreb(8,7,7,6,1,1,new int []{32,9,28,45,24,7,26,29,56,31,8,27,46,23,10,33,52,49,44,25,6,51,30,55,40,53,22,47,34,11,50,43,48,5,38,17,14,41,54,39,2,21,12,35,16,19,42,37,4,15,18,13,36,3,20,1});
		storePreb(8,7,7,6,1,5,new int []{32,9,28,45,24,7,26,29,46,31,8,27,56,23,10,33,50,53,44,25,6,51,30,47,40,49,22,55,34,11,52,43,54,5,38,17,14,41,48,39,2,21,12,35,16,19,42,37,4,15,18,13,36,3,20,1});
		storePreb(8,7,0,6,6,5,new int []{11,26,21,50,9,24,1,20,29,10,25,22,49,8,27,12,53,48,51,2,23,30,19,28,37,54,7,44,13,38,47,52,45,36,3,18,31,16,55,4,43,6,39,14,33,46,41,56,35,32,17,40,15,34,5,42});
		storePreb(8,7,0,6,6,1,new int []{13,26,21,50,11,24,1,20,29,12,25,22,49,10,27,14,53,48,51,2,23,30,19,28,37,54,9,44,15,38,47,52,45,36,3,18,31,16,55,6,43,8,39,56,33,46,41,4,35,32,17,40,5,34,7,42});
		storePreb(8,7,7,0,1,1,new int []{26,7,24,45,28,9,32,23,56,27,8,31,46,29,6,25,52,49,44,33,10,51,22,55,40,53,30,47,38,5,50,43,48,11,34,21,2,39,54,41,14,17,4,37,42,19,16,35,12,1,20,3,36,13,18,15});
		storePreb(8,7,7,0,1,5,new int []{26,7,24,45,28,9,32,23,46,27,8,31,56,29,6,25,50,53,44,33,10,51,22,47,40,49,30,55,38,5,52,43,54,11,34,21,2,39,48,41,14,17,4,37,42,19,16,35,12,1,20,3,36,13,18,15});
		storePreb(8,8,0,0,1,6,new int []{1,38,15,30,35,40,13,28,16,31,36,39,14,29,64,41,37,2,49,34,55,58,27,12,32,17,54,61,52,63,42,57,3,48,33,50,59,56,11,26,18,21,60,53,62,51,8,43,47,4,23,20,45,6,25,10,22,19,46,5,24,9,44,7});
		storePreb(8,8,0,0,6,1,new int []{1,40,9,26,49,38,11,24,8,27,52,39,10,25,48,37,41,2,57,60,53,50,23,12,28,7,54,51,56,59,36,47,3,42,63,58,61,46,13,22,6,29,4,55,20,33,16,35,43,64,31,62,45,18,21,14,30,5,44,19,32,15,34,17});
		storePreb(8,8,7,7,1,6,new int []{31,34,9,24,55,36,7,22,10,25,32,35,8,23,64,37,33,30,45,54,63,56,21,6,26,11,62,59,48,53,38,57,29,44,27,46,61,58,5,20,12,15,60,49,52,47,2,39,43,28,17,14,41,50,19,4,16,13,42,51,18,3,40,1});
		storePreb(8,8,7,7,6,1,new int []{29,32,9,24,59,34,7,22,10,25,30,33,8,23,52,35,31,28,43,58,55,60,21,6,26,11,56,61,46,51,36,53,63,42,27,44,57,54,5,20,12,15,62,47,50,45,2,37,41,64,17,14,39,48,19,4,16,13,40,49,18,3,38,1});
		storePreb(8,8,0,7,1,1,new int []{28,13,40,35,30,15,38,1,41,64,29,14,39,36,31,16,12,27,58,55,34,49,2,37,57,42,63,52,61,54,17,32,26,11,56,59,50,33,48,3,43,8,51,62,53,60,21,18,10,25,6,45,20,23,4,47,7,44,9,24,5,46,19,22});
		storePreb(8,8,0,7,6,6,new int []{24,11,40,55,26,9,38,1,41,60,25,10,39,54,27,8,12,23,56,53,62,47,2,37,59,42,61,48,57,52,7,28,22,13,58,51,46,63,36,3,43,16,49,20,33,4,29,6,14,21,18,45,50,31,64,35,17,44,15,32,19,34,5,30});
		storePreb(8,8,7,0,1,1,new int []{22,7,36,57,24,9,34,31,37,64,23,8,35,32,25,10,6,21,58,61,56,45,30,33,63,38,55,48,53,60,11,26,20,5,62,59,46,27,44,29,39,2,47,54,49,52,15,12,4,19,50,41,14,17,28,43,1,40,3,18,51,42,13,16});
		storePreb(8,8,7,0,6,6,new int []{22,7,34,55,24,9,32,29,35,54,23,8,33,30,25,10,6,21,58,61,56,43,28,31,59,36,53,46,51,62,11,26,20,5,60,57,44,27,42,63,37,2,45,52,47,50,15,12,4,19,48,39,14,17,64,41,1,38,3,18,49,40,13,16});
	}
	
	{
		init();
		
		storePrebStraight(6, 6, 0, 0, 0, 0,  new int[] {1, 26, 29, 10, 7, 24, 28, 11, 36, 25, 30, 9, 21, 2, 27, 8, 23, 6, 12, 35, 22, 19, 16, 31, 3, 20, 33, 14, 5, 18, 34, 13, 4, 17, 32, 15});
		storePrebStraight(6, 7, 0, 0, 0, 0,  new int[] {1, 16, 31, 24, 33, 14, 11, 30, 25, 42, 15, 12, 23, 34, 17, 2, 29, 32, 39, 10, 13, 26, 5, 38, 41, 20, 35, 22, 3, 18, 7, 28, 37, 40, 9, 6, 27, 4, 19, 8, 21, 36});
		storePrebStraight(6, 8, 0, 0, 0, 0,  new int[] {1, 16, 13, 28, 45, 24, 11, 26, 14, 29, 48, 39, 12, 27, 34, 23, 17, 2, 15, 44, 33, 46, 25, 10, 30, 5, 38, 47, 40, 43, 22, 35, 3, 18, 7, 32, 37, 20, 9, 42, 6, 31, 4, 19, 8, 41, 36, 21});
		storePrebStraight(6, 9, 0, 0, 0, 0,  new int[] {1, 36, 41, 20, 51, 28, 13, 18, 15, 40, 21, 54, 37, 42, 19, 16, 29, 12, 35, 2, 39, 50, 47, 52, 27, 14, 17, 22, 5, 48, 53, 38, 43, 46, 11, 30, 3, 34, 7, 24, 49, 32, 9, 26, 45, 6, 23, 4, 33, 8, 25, 44, 31, 10});
		storePrebStraight(7, 6, 0, 0, 0, 0,  new int[] {1, 18, 31, 12, 39, 20, 30, 13, 42, 19, 32, 11, 17, 2, 33, 38, 21, 40, 14, 29, 16, 41, 10, 35, 3, 26, 37, 34, 7, 22, 28, 15, 24, 5, 36, 9, 25, 4, 27, 8, 23, 6});
		storePrebStraight(7, 8, 0, 0, 0, 0,  new int[] {1, 48, 17, 38, 29, 10, 15, 12, 18, 37, 56, 47, 16, 13, 28, 9, 49, 2, 45, 52, 39, 30, 11, 14, 36, 19, 50, 55, 46, 43, 8, 27, 3, 22, 53, 44, 51, 40, 31, 42, 20, 35, 24, 5, 54, 33, 26, 7, 23, 4, 21, 34, 25, 6, 41, 32});
		storePrebStraight(8, 6, 0, 0, 0, 0,  new int[] {1, 32, 35, 12, 9, 22, 34, 13, 48, 21, 36, 11, 31, 2, 33, 10, 23, 8, 14, 39, 30, 47, 20, 37, 3, 28, 41, 38, 7, 24, 40, 15, 46, 29, 42, 19, 27, 4, 17, 44, 25, 6, 16, 45, 26, 5, 18, 43});
		storePrebStraight(8, 7, 0, 0, 0, 0,  new int[] {1, 14, 45, 30, 55, 12, 9, 44, 31, 56, 13, 10, 29, 54, 15, 2, 51, 46, 53, 8, 11, 32, 43, 48, 41, 50, 39, 28, 3, 16, 33, 52, 47, 24, 7, 34, 19, 42, 49, 40, 27, 38, 17, 4, 21, 36, 25, 6, 23, 20, 35, 18, 5, 22, 37, 26});
		storePrebStraight(8, 8, 0, 0, 0, 0,  new int[] {1, 46, 15, 30, 35, 62, 13, 28, 16, 31, 64, 59, 14, 29, 36, 61, 45, 2, 47, 34, 63, 60, 27, 12, 32, 17, 58, 51, 56, 49, 54, 37, 3, 44, 33, 48, 53, 38, 11, 26, 18, 21, 52, 57, 50, 55, 8, 39, 43, 4, 23, 20, 41, 6, 25, 10, 22, 19, 42, 5, 24, 9, 40, 7});
		storePrebStraight(8, 9, 0, 0, 0, 0,  new int[] {1, 62, 45, 18, 57, 32, 11, 16, 13, 44, 19, 72, 61, 46, 17, 14, 33, 10, 71, 2, 63, 58, 67, 56, 31, 12, 15, 20, 43, 70, 49, 60, 47, 66, 9, 34, 3, 50, 59, 64, 55, 68, 35, 30, 37, 42, 21, 54, 69, 48, 65, 38, 27, 8, 51, 4, 23, 40, 53, 6, 25, 36, 29, 22, 41, 52, 5, 24, 39, 28, 7, 26});
		storePrebStraight(9, 6, 0, 0, 0, 0,  new int[] {1, 36, 39, 14, 11, 24, 38, 15, 54, 23, 40, 13, 35, 2, 37, 12, 25, 10, 16, 51, 34, 53, 22, 41, 3, 32, 47, 50, 9, 26, 48, 17, 52, 33, 42, 21, 31, 4, 49, 46, 27, 8, 18, 45, 6, 29, 20, 43, 5, 30, 19, 44, 7, 28});
		storePrebStraight(9, 8, 0, 0, 0, 0,  new int[] {1, 54, 19, 44, 33, 12, 17, 14, 20, 43, 72, 57, 18, 15, 32, 11, 53, 2, 55, 68, 45, 34, 13, 16, 42, 21, 58, 71, 56, 63, 10, 31, 3, 52, 67, 48, 69, 46, 35, 64, 22, 41, 70, 59, 62, 65, 30, 9, 51, 4, 49, 66, 47, 60, 27, 36, 40, 23, 6, 61, 38, 25, 8, 29, 5, 50, 39, 24, 7, 28, 37, 26});
		
	}
	
	void outPart(int partX, int partY, int[] value, int addition) {
		int count = 0;
		int sx = 0;
		int sy = 0;
		for(int i = 0; i < partX; i++) {
			sx += parts[0][i];
		}
		for(int i = 0; i < partY; i++) {
			sy += parts[1][i];
		}
		for(int i = 0; i < parts[0][partX]; i++) {
			for(int j = 0; j < parts[1][partY]; j++) {
				solution[sx + i][sy + j] = addition + value[count++];
			}
		}
	}
	
	int getCorner(int x, int y, int sizeX, int sizeY) {
		if(x == sizeX - 1) x = -1;
		if(y == sizeY - 1) y = -1;
		if(x == 0 && y == 0) return 0;
		if(x == 0 && y == -1) return 1;
		if(x == -1 && y == -1) return 2;
		if(x == -1 && y == 0) return 3;
		return -1;
	}
	
	int getWhereToStart(int direction, int x, int y, int sizeX, int sizeY) {
		for(int i = 0; i < moves.length; i++) {
			int nx = x + moves[i][0];
			int ny = y + moves[i][1];
			
			if(direction == 0) {
				if(nx < 0 || ny < 0 || nx >= sizeX) continue;
				if(ny >= sizeY) {
					int h = getCorner(nx, ny - sizeY, sizeX, sizeY);
					if(h >= 0) return h;
				}
			}
			if(direction == 1) {
				if(nx < 0 || ny < 0 || ny >= sizeY) continue;
				if(nx >= sizeX) {
					int h = getCorner(nx - sizeX, ny, sizeX, sizeY);
					if(h >= 0) return h;
				}
			}
			if(direction == 2) {
				if(nx < 0 || ny >= sizeY || nx >= sizeX) continue;
				if(ny < 0) {
					int h = getCorner(nx, ny, sizeX, sizeY);
					if(h >= 0) return h;
				}
			}
			if(direction == 3) {
				if(ny >= sizeY || ny < 0 || nx >= sizeX) continue;
				if(nx < 0) {
					int h = getCorner(nx, ny, sizeX, sizeY);
					if(h >= 0) return h;
				}
			}
			
		}

		return -1;
	}
	
	boolean tryToFill(
			int origPartX, int origPartY, 
			int partX, int partY, 
			int current,
			int startX, int startY,
			int totalMoves,
			int sizeX, int sizeY) {
		
		int direction = 0;
		if(origPartY < partY) direction = 0;
		if(origPartX < partX) direction = 1;
		if(origPartY > partY) direction = 2;
		if(origPartX > partX) direction = 3;
		
		for(int finish = 0; finish < corners.length; finish++) {
			int finishX = corners[finish][0];
			int finishY = corners[finish][1];
			if(finishX < 0) finishX += parts[0][origPartX];
			if(finishY < 0) finishY += parts[1][origPartY];
			
			if(getPb(sizeX, sizeY, startX, startY, finishX, finishY) == null) continue;
			
			int startCorner = getWhereToStart(direction, finishX, finishY, sizeX, sizeY);
			if(startCorner < 0) continue;
			
			if(fill(partX, partY, 
					current, 
					startCorner, 
					totalMoves + sizeX * sizeY)) {
				outPart(origPartX, origPartY, getPb(sizeX, sizeY, startX, startY, finishX, finishY), totalMoves);
				if(current == n * m) {
					if(firstCorner == 3 && finish == 0) return true;
					if(firstCorner == 2 && finish == 1) return true;
					return false;
				}
				return true;
			}
		}

		return false;
	}
	
	boolean fill(int partX, int partY, int current, int corner, int totalMoves) {

		if(current == n * m) {
			return true;
		}

		if(checked[partX][partY][corner] == 1) {
			return false;
		}
		
		checked[partX][partY][corner] = 1;
		
		int sizeX = parts[0][partX];
		int sizeY = parts[1][partY];
		
		int startX = 0;
		int startY = 0;
		if(corner == 0) {
			startX = 0; startY = 0;
		}
		if(corner == 1) {
			startX = 0; startY = sizeY - 1;
		}
		if(corner == 2) {
			startX = sizeX - 1; startY = sizeY - 1;
		}
		if(corner == 3) {
			startX = sizeX - 1; startY = 0;
		}
		
		if(partX == 0) {
			if(partY == m - 1) {
				if(tryToFill(partX, partY, partX + 1, partY, current + 1, startX, startY, totalMoves, sizeX, sizeY)) return true;
			} else {
				if(tryToFill(partX, partY, partX, partY + 1,  current + 1, startX, startY, totalMoves, sizeX, sizeY)) return true;
			}
		} else {
			if(partY % 2 == directionChange) {
				if(partX >= n - 1) {
					if(tryToFill(partX, partY, partX, partY - 1, current + 1, startX, startY, totalMoves, sizeX, sizeY)) return true;
				} else {
					if(tryToFill(partX, partY, partX + 1, partY, current + 1, startX, startY, totalMoves, sizeX, sizeY)) return true;
				}
			} else {
				if(partX <= 1) {
					if(tryToFill(partX, partY, partX, partY - 1, current + 1, startX, startY, totalMoves, sizeX, sizeY)) return true;
				} else {
					if(tryToFill(partX, partY, partX - 1, partY, current + 1, startX, startY, totalMoves, sizeX, sizeY)) return true;
				}
			}
		}
		
		return false;
	}

	public int[] getPartition(int x, boolean even) {
		for(int nine = 0; nine <= 2; nine++) {
			for(int eight = 0; eight <= 2; eight++) {
				for(int seven = 0; seven <= 1; seven++) {
					for(int six = 0; x - eight * 8 - seven * 7 - six * 6 - nine * 9 >= 0; six++) {
						
						int five = 0;
						int left = x - eight * 8 - seven * 7 - six * 6 - nine * 9;
						if(left % 5 == 0) {
							five = (x - eight * 8 - seven * 7 - six * 6 - nine * 9) / 5;
							if(even) {
								if((eight + seven + six + five + nine) % 2 == 0) {
									return new int[] {five, six, seven, eight, + nine};
								}
							} else {
								return new int[] {five, six, seven, eight, + nine};
							}
						}
	
					}
				}
			}
		}
		return null;
	}
	
	public int[][] solveSingle(int w, int h, int top) {
		int[] partitionW = getPartition(w, w > 20);
		int[] partitionH = getPartition(h, true);
		
		if(partitionH == null) return null;
		
		if(top == 0) {
			for(int i = 0; i < 5; i++) {
				for(int j = 0; j < partitionW[i]; j++) {
					parts[0][n++] = i + 5;
				}
			}
			for(int i = 4; i >= 0; i--) {
				for(int j = 0; j < partitionH[i]; j++) {
					parts[1][m++] = i + 5;
				}
			}
		} else {
			for(int i = 4; i >= 0; i--) {
				for(int j = 0; j < partitionW[i]; j++) {
					parts[0][n++] = i + 5;
				}
			}
			for(int i = 0; i < 5; i++) {
				for(int j = 0; j < partitionH[i]; j++) {
					parts[1][m++] = i + 5;
				}
			}
		}
		
		directionChange = 1 - m % 2;

		firstCorner = 3;
		if(!fill(0, 0, 0, firstCorner, 0)) {
			firstCorner = 2;
			if(!fill(0, 0, 0, firstCorner, 0)) {
				return null;
			}
		}
		
		return solution;
	}
	
	public static int[][] solveSingle(int w, int h) {
		NightmareKnightBigPrebuild nkbp = new NightmareKnightBigPrebuild();
		
		if(nkbp.getPbStraight(w, h) != null) {
			int[] a = nkbp.getPbStraight(w, h);
			int[][] answer = new int[w][h];
			int count = 0;
			for(int i = 0; i < w; i++) {
				for(int j = 0; j < h; j++) {
					answer[i][j] = a[count++];
				}
			}
			return answer;
		}
		
		int[][] a = nkbp.solveSingle(w, h, 0);
		
		if(a == null) {
			nkbp = new NightmareKnightBigPrebuild();
			a = nkbp.solveSingle(w, h, 1);
			if(a == null) {
				return null;
			}
		}
		
		return a;
	}
	
	static int[][] transponate(int[][] a, int n, int m) {
		int[][] answer = new int[m][n]; 
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				answer[j][i] = a[i][j];
			}
		}
		return answer;
	}

	static void outputAnswer(int[][] a, int n, int m) {
		
		PrintWriter pw = new PrintWriter(System.out);
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				int next = a[i][j] + 1;
				if(a[i][j] == n * m) next = 1;

				for(int h = 0; h < correctOrderMoves.length; h++) {
					int nx = i + correctOrderMoves[h][0];
					int ny = j + correctOrderMoves[h][1];
					if(nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
					
					if(a[nx][ny] == next) {
						pw.printf("%d ", h + 1);
						break;
					}
				}
			}
			pw.println();
		}
		pw.flush();
		pw.close();
	}
	
	public static void solveTask() {
		java.util.Scanner scanner = new java.util.Scanner(System.in);
		int n = scanner.nextInt();
		int m = scanner.nextInt();
		scanner.close();

		if(n % 2 == 1 && m % 2 == 1) {
			System.out.println("No solution");
			return;
		}

		int[][] a = null;
		boolean transp = false;
		if(n < 10 && m >= 10) {
			NightnareKnightSmallPrebuild nksp = new NightnareKnightSmallPrebuild();
			a = nksp.solve(n, m);
		} else
		if(m < 10 && n >= 10) {
			int h = m;
			m = n;
			n = h;
			NightnareKnightSmallPrebuild nksp = new NightnareKnightSmallPrebuild();
			a = nksp.solve(n, m);
			transp = true;
		} else {
			if(m == 19) {
				m = n;
				n = 19;
				transp = true;
			}
			a = solveSingle(n, m);
		}
		
		if(transp) {
			a = transponate(a, n, m);
			int h = n;
			n = m;
			m = h;
		}
		outputAnswer(a, n, m);
	}
	
	public static void main(String[] args) {
		solveTask();
	}
	
}
