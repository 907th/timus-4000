public class NightnareKnightSmallPrebuild {

	int[][][][][] pass = new int[10][10][2][][];
	int[][][][][] rightEdge = new int[10][10][2][][];
	int[][][][][] leftEdge = new int[10][10][2][][];

	int[][] solution = new int[10][1024];
	int[][] answer = new int[10][1024];
	int[][] f = new int[10][1024];

	int rS = 0;
	int lS = 0;

	public static int[][] orderedMoves = new int[][] { { 1, -2 }, { -1, -2 }, { 2, -1 }, { -2, -1 }, { 2, 1 },
			{ -2, 1 }, { 1, 2 }, { -1, 2 } };

	void prebuildFor6() {
		pass[6][6][0] = new int[][] {
			{-10, -13, -4, 8, -24, 10},
			{-3, 1, -11, -22, -5, 7},
			{-12, -9, -14, -25, 9, -23},
			{2, -2, -21, -18, 6, -6},
			{-20, -15, -8, 4, -26, -17},
			{-1, 3, -19, -16, -7, 5}
			};

			leftEdge[6][5][0] = new int[][] {
			{7, 18, 27, 10, 1},
			{26, 11, 8, 17, 28},
			{19, 6, 29, 2, 9},
			{12, 25, 14, 21, 16},
			{5, 20, 23, 30, 3},
			{24, 13, 4, 15, 22}
			};

			leftEdge[6][5][1] = new int[][] {
			{23, 2, 11, 14, 21},
			{10, 19, 22, 1, 12},
			{3, 24, 13, 20, 15},
			{18, 9, 26, 29, 6},
			{25, 4, 7, 16, 27},
			{8, 17, 28, 5, 30}
			};
			rightEdge[6][5][0] = new int[][] {
			{30, 5, 28, 17, 8},
			{27, 16, 7, 4, 25},
			{6, 29, 26, 9, 18},
			{15, 20, 13, 24, 3},
			{12, 1, 22, 19, 10},
			{21, 14, 11, 2, 23}
			};

			rightEdge[6][5][1] = new int[][] {
			{16, 13, 4, 29, 18},
			{3, 30, 17, 14, 5},
			{12, 15, 26, 19, 28},
			{25, 2, 23, 6, 9},
			{22, 11, 8, 27, 20},
			{1, 24, 21, 10, 7}
			};
			leftEdge[6][6][0] = new int[][] {
			{12, 7, 34, 27, 10, 1},
			{33, 28, 11, 8, 21, 26},
			{6, 13, 32, 35, 2, 9},
			{31, 16, 29, 20, 25, 22},
			{14, 5, 18, 23, 36, 3},
			{17, 30, 15, 4, 19, 24}
			};

			leftEdge[6][6][1] = new int[][] {
			{10, 27, 8, 23, 12, 25},
			{7, 20, 11, 26, 1, 22},
			{28, 9, 34, 21, 24, 13},
			{19, 6, 17, 30, 33, 2},
			{16, 29, 4, 35, 14, 31},
			{5, 18, 15, 32, 3, 36}
			};
			rightEdge[6][6][0] = new int[][] {
			{36, 3, 32, 15, 18, 5},
			{31, 14, 35, 4, 29, 16},
			{2, 33, 30, 17, 6, 19},
			{13, 24, 21, 34, 9, 28},
			{22, 1, 26, 11, 20, 7},
			{25, 12, 23, 8, 27, 10}
			};

			rightEdge[6][6][1] = new int[][] {
			{24, 19, 4, 15, 30, 17},
			{3, 36, 23, 18, 5, 14},
			{22, 25, 20, 29, 16, 31},
			{9, 2, 35, 32, 13, 6},
			{26, 21, 8, 11, 28, 33},
			{1, 10, 27, 34, 7, 12}
			};
			leftEdge[6][7][0] = new int[][] {
			{11, 14, 19, 30, 33, 16, 1},
			{20, 31, 12, 15, 18, 29, 34},
			{13, 10, 39, 32, 35, 2, 17},
			{24, 21, 36, 41, 38, 5, 28},
			{9, 40, 23, 26, 7, 42, 3},
			{22, 25, 8, 37, 4, 27, 6}
			};

			leftEdge[6][7][1] = new int[][] {
			{37, 16, 21, 8, 29, 10, 19},
			{22, 7, 36, 17, 20, 1, 28},
			{15, 38, 23, 30, 9, 18, 11},
			{6, 33, 40, 35, 24, 27, 2},
			{39, 14, 31, 4, 41, 12, 25},
			{32, 5, 34, 13, 26, 3, 42}
			};
			rightEdge[6][7][0] = new int[][] {
			{42, 3, 32, 13, 26, 5, 36},
			{33, 14, 27, 4, 35, 12, 25},
			{2, 41, 34, 31, 24, 37, 6},
			{15, 28, 23, 40, 9, 18, 11},
			{22, 1, 30, 17, 20, 7, 38},
			{29, 16, 21, 8, 39, 10, 19}
			};

			rightEdge[6][7][1] = new int[][] {
			{6, 9, 4, 17, 40, 11, 32},
			{3, 42, 7, 10, 33, 18, 39},
			{8, 5, 16, 41, 38, 31, 12},
			{23, 2, 37, 34, 25, 28, 19},
			{36, 15, 24, 21, 30, 13, 26},
			{1, 22, 35, 14, 27, 20, 29}
			};
			leftEdge[6][8][0] = new int[][] {
			{40, 11, 44, 19, 32, 13, 16, 1},
			{45, 20, 39, 12, 43, 18, 31, 14},
			{10, 41, 46, 33, 38, 15, 2, 17},
			{21, 24, 37, 42, 47, 28, 5, 30},
			{36, 9, 26, 23, 34, 7, 48, 3},
			{25, 22, 35, 8, 27, 4, 29, 6}
			};

			leftEdge[6][8][1] = new int[][] {
			{8, 11, 24, 39, 32, 13, 22, 19},
			{25, 38, 9, 12, 23, 20, 1, 14},
			{10, 7, 44, 33, 40, 31, 18, 21},
			{37, 26, 41, 46, 43, 34, 15, 2},
			{6, 45, 28, 35, 4, 47, 30, 17},
			{27, 36, 5, 42, 29, 16, 3, 48}
			};
			rightEdge[6][8][0] = new int[][] {
			{48, 3, 20, 43, 28, 5, 18, 15},
			{21, 38, 45, 4, 19, 16, 29, 6},
			{2, 47, 42, 39, 44, 27, 14, 17},
			{37, 22, 35, 46, 11, 40, 7, 30},
			{34, 1, 24, 41, 32, 9, 26, 13},
			{23, 36, 33, 10, 25, 12, 31, 8}
			};

			rightEdge[6][8][1] = new int[][] {
			{6, 9, 4, 19, 46, 11, 32, 21},
			{3, 48, 7, 10, 33, 20, 41, 12},
			{8, 5, 18, 47, 40, 45, 22, 31},
			{27, 2, 39, 36, 29, 34, 13, 42},
			{38, 17, 28, 25, 44, 15, 30, 23},
			{1, 26, 37, 16, 35, 24, 43, 14}
			};
	}

	void prebuildFor7() {
		pass[7][6][0] = new int[][] { { 1, -9, -12, 12, -18, -1 }, { -11, 13, -19, -22, -13, 11 },
				{ -8, 2, -10, -17, -2, -21 }, { 14, -16, -23, -20, 10, -14 }, { 3, -7, 15, -15, 7, -3 },
				{ 16, -24, -5, 5, 18, 9 }, { -6, 4, 17, 8, -4, 6 } };

		pass[7][6][1] = new int[][] { { 21, 12, 19, 8, 23, 10 }, { 18, 1, 22, 11, -16, 7 }, { 13, 20, -15, -8, 9, 24 },
				{ 2, 17, -4, -11, 6, -9 }, { -3, 14, -7, -14, 25, -12 }, { 16, 3, -2, -5, -10, 5 },
				{ -1, -6, 15, 4, -13, 26 } };
		leftEdge[7][5][0] = new int[][] { { 27, 30, 19, 8, 1 }, { 20, 7, 28, 33, 18 }, { 29, 26, 31, 2, 9 },
				{ 6, 21, 34, 17, 32 }, { 25, 14, 23, 10, 3 }, { 22, 5, 12, 35, 16 }, { 13, 24, 15, 4, 11 } };

		leftEdge[7][5][1] = new int[][] { { 19, 2, 23, 12, 21 }, { 32, 11, 20, 1, 24 }, { 3, 18, 31, 22, 13 },
				{ 10, 33, 14, 25, 30 }, { 17, 4, 29, 34, 7 }, { 28, 9, 6, 15, 26 }, { 5, 16, 27, 8, 35 } };
		rightEdge[7][5][0] = new int[][] { { 35, 18, 33, 8, 5 }, { 32, 9, 6, 17, 30 }, { 19, 34, 31, 4, 7 },
				{ 10, 25, 14, 29, 16 }, { 13, 20, 11, 24, 3 }, { 26, 1, 22, 15, 28 }, { 21, 12, 27, 2, 23 } };

		rightEdge[7][5][1] = new int[][] { { 17, 20, 7, 34, 15 }, { 8, 35, 16, 19, 6 }, { 21, 18, 25, 14, 33 },
				{ 24, 9, 22, 5, 26 }, { 29, 2, 11, 32, 13 }, { 10, 23, 30, 27, 4 }, { 1, 28, 3, 12, 31 } };
		leftEdge[7][7][0] = new int[][] { { 9, 12, 23, 30, 39, 14, 1 }, { 22, 43, 10, 13, 24, 31, 40 },
				{ 11, 8, 29, 38, 41, 2, 15 }, { 44, 21, 42, 25, 48, 37, 32 }, { 7, 28, 47, 36, 33, 16, 3 },
				{ 20, 45, 26, 5, 18, 49, 34 }, { 27, 6, 19, 46, 35, 4, 17 } };

		leftEdge[7][7][1] = new int[][] { { 45, 28, 21, 8, 17, 10, 19 }, { 22, 7, 46, 39, 20, 1, 16 },
				{ 29, 44, 27, 42, 9, 18, 11 }, { 6, 23, 40, 47, 38, 15, 2 }, { 33, 30, 43, 26, 41, 12, 37 },
				{ 24, 5, 32, 35, 48, 3, 14 }, { 31, 34, 25, 4, 13, 36, 49 } };
		rightEdge[7][7][0] = new int[][] { { 49, 18, 41, 4, 27, 16, 13 }, { 40, 3, 28, 17, 14, 5, 26 },
				{ 19, 48, 39, 42, 33, 12, 15 }, { 2, 29, 34, 47, 38, 25, 6 }, { 35, 20, 43, 32, 9, 46, 11 },
				{ 30, 1, 22, 37, 44, 7, 24 }, { 21, 36, 31, 8, 23, 10, 45 } };

		rightEdge[7][7][1] = new int[][] { { 9, 12, 7, 38, 29, 14, 27 }, { 6, 49, 10, 13, 26, 37, 30 },
				{ 11, 8, 43, 48, 39, 28, 15 }, { 42, 5, 40, 25, 44, 31, 36 }, { 23, 2, 45, 34, 47, 16, 19 },
				{ 4, 41, 24, 21, 18, 35, 32 }, { 1, 22, 3, 46, 33, 20, 17 } };
	}

	void prebuildFor8() {
		pass[8][6][0] = new int[][] {
			{-20, 8, -22, -7, -18, 10},
			{-23, 1, -19, 9, -35, -6},
			{7, -21, -34, -31, -8, -17},
			{2, -24, -15, -36, -5, -32},
			{-14, 6, -30, -33, -16, -9},
			{-25, 3, -37, -10, -29, -4},
			{5, -13, -2, -27, -38, -11},
			{-1, -26, 4, -12, -3, -28}
			};

			leftEdge[8][5][0] = new int[][] {
			{13, 34, 9, 24, 1},
			{10, 23, 12, 33, 8},
			{31, 14, 35, 2, 25},
			{22, 11, 32, 7, 36},
			{15, 30, 37, 26, 3},
			{38, 21, 4, 17, 6},
			{29, 16, 19, 40, 27},
			{20, 39, 28, 5, 18}
			};

			leftEdge[8][5][1] = new int[][] {
			{21, 2, 25, 10, 23},
			{32, 11, 22, 1, 26},
			{3, 20, 33, 24, 9},
			{12, 31, 38, 27, 34},
			{19, 4, 35, 8, 37},
			{30, 13, 28, 39, 16},
			{5, 18, 15, 36, 7},
			{14, 29, 6, 17, 40}
			};
			rightEdge[8][5][0] = new int[][] {
			{40, 29, 6, 17, 14},
			{7, 18, 15, 36, 5},
			{30, 39, 28, 13, 16},
			{19, 8, 35, 4, 37},
			{34, 31, 38, 27, 12},
			{9, 20, 33, 24, 3},
			{32, 1, 22, 11, 26},
			{21, 10, 25, 2, 23}
			};

			rightEdge[8][5][1] = new int[][] {
			{24, 9, 18, 7, 22},
			{19, 40, 23, 36, 17},
			{10, 25, 8, 21, 6},
			{39, 20, 35, 16, 37},
			{26, 11, 38, 5, 34},
			{31, 2, 13, 28, 15},
			{12, 27, 30, 33, 4},
			{1, 32, 3, 14, 29}
			};
			leftEdge[8][6][0] = new int[][] {
			{26, 41, 32, 9, 24, 1},
			{33, 10, 25, 42, 37, 8},
			{44, 27, 40, 31, 2, 23},
			{11, 34, 43, 36, 7, 38},
			{28, 45, 30, 39, 22, 3},
			{15, 12, 35, 4, 19, 6},
			{46, 29, 14, 17, 48, 21},
			{13, 16, 47, 20, 5, 18}
			};

			leftEdge[8][6][1] = new int[][] {
			{10, 25, 40, 29, 8, 27},
			{39, 36, 9, 26, 1, 30},
			{24, 11, 38, 41, 28, 7},
			{37, 42, 35, 22, 31, 2},
			{12, 23, 14, 43, 6, 21},
			{15, 46, 17, 34, 3, 32},
			{18, 13, 44, 47, 20, 5},
			{45, 16, 19, 4, 33, 48}
			};
			rightEdge[8][6][0] = new int[][] {
			{48, 33, 4, 19, 16, 45},
			{5, 20, 47, 44, 35, 18},
			{32, 3, 34, 17, 46, 15},
			{21, 6, 43, 40, 23, 36},
			{2, 31, 22, 37, 14, 41},
			{7, 28, 39, 42, 11, 24},
			{30, 1, 26, 9, 38, 13},
			{27, 8, 29, 12, 25, 10}
			};

			rightEdge[8][6][1] = new int[][] {
			{28, 7, 30, 39, 26, 9},
			{31, 48, 27, 8, 35, 38},
			{6, 29, 40, 37, 10, 25},
			{41, 32, 47, 34, 43, 36},
			{46, 5, 42, 13, 24, 11},
			{17, 2, 33, 44, 21, 14},
			{4, 45, 16, 19, 12, 23},
			{1, 18, 3, 22, 15, 20}
			};
			leftEdge[8][7][0] = new int[][] {
			{11, 26, 21, 50, 9, 24, 1},
			{20, 29, 10, 25, 22, 49, 8},
			{27, 12, 53, 48, 51, 2, 23},
			{30, 19, 28, 37, 54, 7, 44},
			{13, 38, 47, 52, 45, 36, 3},
			{18, 31, 16, 55, 4, 43, 6},
			{39, 14, 33, 46, 41, 56, 35},
			{32, 17, 40, 15, 34, 5, 42}
			};

			leftEdge[8][7][1] = new int[][] {
			{33, 10, 29, 52, 25, 8, 27},
			{30, 45, 32, 9, 28, 1, 24},
			{11, 34, 53, 44, 51, 26, 7},
			{46, 31, 50, 41, 48, 23, 2},
			{35, 12, 47, 54, 43, 6, 39},
			{18, 15, 42, 49, 40, 3, 22},
			{13, 36, 17, 20, 55, 38, 5},
			{16, 19, 14, 37, 4, 21, 56}
			};
			rightEdge[8][7][0] = new int[][] {
			{56, 21, 4, 37, 14, 19, 16},
			{5, 38, 55, 20, 17, 36, 13},
			{22, 3, 48, 41, 46, 15, 18},
			{39, 6, 45, 54, 49, 12, 35},
			{2, 23, 40, 47, 42, 31, 50},
			{7, 26, 53, 44, 51, 34, 11},
			{24, 1, 28, 9, 32, 43, 30},
			{27, 8, 25, 52, 29, 10, 33}
			};

			rightEdge[8][7][1] = new int[][] {
			{26, 7, 24, 45, 28, 9, 32},
			{23, 56, 27, 8, 31, 46, 29},
			{6, 25, 52, 49, 44, 33, 10},
			{51, 22, 55, 40, 53, 30, 47},
			{38, 5, 50, 43, 48, 11, 34},
			{21, 2, 39, 54, 41, 14, 17},
			{4, 37, 42, 19, 16, 35, 12},
			{1, 20, 3, 36, 13, 18, 15}
			};
			leftEdge[8][8][0] = new int[][] {
			{24, 11, 40, 55, 26, 9, 38, 1},
			{41, 60, 25, 10, 39, 54, 27, 8},
			{12, 23, 56, 53, 62, 47, 2, 37},
			{59, 42, 61, 48, 57, 52, 7, 28},
			{22, 13, 58, 51, 46, 63, 36, 3},
			{43, 16, 49, 20, 33, 4, 29, 6},
			{14, 21, 18, 45, 50, 31, 64, 35},
			{17, 44, 15, 32, 19, 34, 5, 30}
			};

			leftEdge[8][8][1] = new int[][] {
			{32, 35, 10, 25, 58, 37, 8, 23},
			{11, 26, 33, 36, 9, 24, 1, 38},
			{34, 31, 46, 57, 52, 59, 22, 7},
			{27, 12, 51, 54, 49, 56, 39, 2},
			{30, 45, 28, 47, 60, 53, 6, 21},
			{13, 16, 61, 50, 55, 48, 3, 40},
			{44, 29, 18, 15, 42, 63, 20, 5},
			{17, 14, 43, 62, 19, 4, 41, 64}
			};
			rightEdge[8][8][0] = new int[][] {
			{64, 35, 4, 19, 56, 33, 14, 17},
			{5, 20, 63, 34, 15, 18, 47, 32},
			{36, 3, 60, 57, 62, 55, 16, 13},
			{21, 6, 51, 54, 59, 46, 31, 48},
			{2, 37, 58, 61, 52, 49, 12, 27},
			{7, 22, 53, 50, 45, 28, 41, 30},
			{38, 1, 24, 9, 40, 43, 26, 11},
			{23, 8, 39, 44, 25, 10, 29, 42}
			};

			rightEdge[8][8][1] = new int[][] {
			{22, 7, 36, 57, 24, 9, 34, 31},
			{37, 64, 23, 8, 35, 32, 25, 10},
			{6, 21, 58, 61, 56, 45, 30, 33},
			{63, 38, 55, 48, 53, 60, 11, 26},
			{20, 5, 62, 59, 46, 27, 44, 29},
			{39, 2, 47, 54, 49, 52, 15, 12},
			{4, 19, 50, 41, 14, 17, 28, 43},
			{1, 40, 3, 18, 51, 42, 13, 16}
			};
	}

	void prebuildFor9() {
		pass[9][6][0] = new int[][] { { 1, 14, -24, 18, 11, -1 }, { -25, 19, 12, 15, -17, 17 },
				{ 13, 2, -26, -23, -2, 10 }, { 20, -20, -3, -18, 16, -16 }, { 3, -11, -22, -27, 9, -5 },
				{ -21, 21, -19, -4, -15, -28 }, { -10, 4, -12, -29, -6, 8 }, { 22, -30, 6, -8, 24, -14 },
				{ 5, -9, 23, -13, 7, -7 } };

		pass[9][6][1] = new int[][] { { -5, 14, -29, 10, -7, 12 }, { -30, 1, -6, 13, -34, 9 },
				{ 15, -4, -31, -28, 11, -8 }, { 2, -23, -10, -17, 8, -33 }, { -3, 16, -27, -32, -9, -16 },
				{ -22, 3, -24, -11, -18, 7 }, { 17, -2, -21, -26, -15, -12 }, { 4, -25, -14, 19, 6, -19 },
				{ -1, 18, 5, -20, -13, 20 } };
		leftEdge[9][5][0] = new int[][] { { 29, 14, 33, 24, 1 }, { 34, 23, 30, 13, 32 }, { 15, 28, 35, 2, 25 },
				{ 22, 41, 26, 31, 12 }, { 27, 16, 43, 36, 3 }, { 42, 21, 40, 11, 44 }, { 17, 8, 19, 4, 37 },
				{ 20, 39, 6, 45, 10 }, { 7, 18, 9, 38, 5 } };

		leftEdge[9][5][1] = new int[][] { { 37, 2, 11, 20, 39 }, { 12, 21, 38, 1, 10 }, { 3, 36, 23, 40, 19 },
				{ 22, 13, 32, 9, 24 }, { 35, 4, 41, 18, 33 }, { 14, 31, 34, 25, 8 }, { 5, 42, 27, 30, 17 },
				{ 28, 15, 44, 7, 26 }, { 43, 6, 29, 16, 45 } };
		rightEdge[9][5][0] = new int[][] { { 45, 16, 29, 6, 31 }, { 26, 7, 32, 15, 28 }, { 17, 44, 27, 30, 5 },
				{ 8, 25, 36, 33, 14 }, { 37, 18, 43, 4, 35 }, { 24, 9, 34, 13, 22 }, { 19, 38, 23, 42, 3 },
				{ 10, 1, 40, 21, 12 }, { 39, 20, 11, 2, 41 } };

		rightEdge[9][5][1] = new int[][] { { 35, 8, 17, 42, 37 }, { 18, 45, 36, 7, 16 }, { 9, 34, 41, 38, 43 },
				{ 40, 19, 44, 15, 6 }, { 33, 10, 39, 24, 31 }, { 20, 27, 32, 5, 14 }, { 11, 2, 25, 30, 23 },
				{ 26, 21, 28, 13, 4 }, { 1, 12, 3, 22, 29 } };
		leftEdge[9][7][0] = new int[][] { { 23, 26, 43, 12, 55, 28, 1 }, { 42, 11, 24, 27, 44, 13, 54 },
				{ 25, 22, 49, 56, 53, 2, 29 }, { 10, 41, 52, 59, 50, 45, 14 }, { 21, 36, 61, 48, 57, 30, 3 },
				{ 40, 9, 58, 51, 60, 15, 46 }, { 35, 20, 37, 62, 47, 4, 31 }, { 8, 39, 18, 33, 6, 63, 16 },
				{ 19, 34, 7, 38, 17, 32, 5 } };

		leftEdge[9][7][1] = new int[][] { { 31, 14, 45, 58, 29, 12, 9 }, { 44, 47, 30, 13, 10, 1, 28 },
				{ 15, 32, 57, 46, 59, 8, 11 }, { 48, 43, 54, 51, 56, 27, 2 }, { 33, 16, 49, 60, 53, 22, 7 },
				{ 42, 37, 52, 55, 50, 3, 26 }, { 17, 34, 61, 40, 23, 6, 21 }, { 38, 41, 36, 19, 62, 25, 4 },
				{ 35, 18, 39, 24, 5, 20, 63 } };
		rightEdge[9][7][0] = new int[][] { { 63, 32, 5, 16, 47, 30, 27 }, { 4, 17, 62, 31, 28, 15, 46 },
				{ 33, 6, 57, 48, 61, 26, 29 }, { 18, 3, 60, 53, 58, 45, 14 }, { 7, 34, 49, 56, 51, 40, 25 },
				{ 2, 19, 52, 59, 54, 13, 44 }, { 35, 8, 55, 50, 41, 24, 39 }, { 20, 1, 10, 37, 22, 43, 12 },
				{ 9, 36, 21, 42, 11, 38, 23 } };

		rightEdge[9][7][1] = new int[][] { { 55, 22, 51, 62, 15, 20, 17 }, { 50, 63, 54, 21, 18, 47, 14 },
				{ 23, 56, 49, 52, 61, 16, 19 }, { 6, 53, 60, 57, 48, 13, 46 }, { 59, 24, 7, 42, 45, 30, 39 },
				{ 8, 5, 58, 35, 40, 43, 12 }, { 25, 2, 41, 44, 31, 38, 29 }, { 4, 9, 34, 27, 36, 11, 32 },
				{ 1, 26, 3, 10, 33, 28, 37 } };
	}

	{
		prebuildFor6();
		prebuildFor7();
		prebuildFor8();
		prebuildFor9();
	}

	void put(int x, int y, int[][] part, int toAdd, int oddity) {
		for (int i = 0; i < part.length; i++) {
			for (int j = 0; j < part[i].length; j++) {
				answer[x + i][y + j] = part[i][j];
				if (oddity == 1) {
					answer[x + i][y + j] = -answer[x + i][y + j];
				}
			}
		}
	}

	void output(int w, int h, int[][] a) {
		for (int i = 0; i < w; i++) {
			for (int j = 0; j < h; j++) {
				System.out.printf("%4d ", a[i][j]);
			}
			System.out.println();
		}
		System.out.println();
	}

	void reorder(int w, int h, int x, int y, boolean increase, int current) {
		if (x < 0 || y < 0)
			return;
		f[x][y] = 1;
		solution[x][y] = current;
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (increase) {
				if (answer[nx][ny] == answer[x][y] + 1) {
					reorder(w, h, nx, ny, increase, current + 1);
					return;
				}
			} else {
				if (answer[nx][ny] == answer[x][y] - 1) {
					reorder(w, h, nx, ny, increase, current + 1);
					return;
				}
			}
		}
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (answer[nx][ny] == 1 && ny <= h - rS) {
				reorder(w, h, nx, ny, increase, current + 1);
				return;
			}
			if (answer[nx][ny] == rS * w && ny >= lS) {
				reorder(w, h, nx, ny, false, current + 1);
				return;
			}
		}

		int mn = 1000000;
		int mnx = -1;
		int mny = -1;
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (answer[nx][ny] > 0)
				continue;
			if (answer[nx][ny] == -1) {
				reorder(w, h, nx, ny, false, current + 1);
				return;
			}
			if (mn > answer[nx][ny]) {
				mn = answer[nx][ny];
				mnx = nx;
				mny = ny;
			}
		}

		reorder(w, h, mnx, mny, true, current + 1);

	}

	void solveOdd(int w, int h) {
		int leftSize = 0, rightSize = 0;
		if (h - 5 - 5 >= 0 && (h - 5 - 5) % 6 == 0) {
			leftSize = 5;
			rightSize = 5;
		}
		if (h - 7 - 5 >= 0 && (h - 7 - 5) % 6 == 0) {
			leftSize = 7;
			rightSize = 5;
		}
		if (h - 7 - 7 >= 0 && (h - 7 - 7) % 6 == 0) {
			leftSize = 7;
			rightSize = 7;
		}

		rS = rightSize;
		lS = leftSize;

		int oddity = 1;
		int count = (h - leftSize - rightSize) / 6;
		put(0, 0, leftEdge[w][leftSize][0], 0, 0);
		for (int i = 0; i < count; i++) {
			put(0, leftSize + i * 6, pass[w][6][oddity], leftSize * w + w * 6 * i, oddity);
			oddity = 1 - oddity;
		}
		put(0, h - rightSize, rightEdge[w][rightSize][oddity], 0, 0);

		int sx = 0, sy = 0;

		for (int j = 0; j < h; j++) {
			for (int i = 0; i < w; i++) {
				if (answer[i][j] == 1) {
					sx = i;
					sy = j;
					break;
				}
			}
			if (sx != 0 || sy != 0)
				break;
		}
		// output(w, h, answer);
		reorder(w, h, sx, sy, true, 1);
		output(w, h, solution);
	}
	
	void reorderEven(int w, int h, int x, int y, boolean increase, int current) {
		if (x < 0 || y < 0)
			return;
		
		f[x][y] = 1;
		solution[x][y] = current;
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (increase) {
				if (answer[nx][ny] == answer[x][y] + 1) {
					reorderEven(w, h, nx, ny, increase, current + 1);
					return;
				}
			} else {
				if (answer[nx][ny] == answer[x][y] - 1) {
					reorderEven(w, h, nx, ny, increase, current + 1);
					return;
				}
			}
		}
		for (int i = 0; i < orderedMoves.length; i++) {
			int nx = x + orderedMoves[i][0];
			int ny = y + orderedMoves[i][1];
			if (nx < 0 || ny < 0 || nx >= w || ny >= h)
				continue;
			if (f[nx][ny] == 1)
				continue;
			if (answer[nx][ny] == -1 && ny <= h - rS) {
				reorderEven(w, h, nx, ny, false, current + 1);
				return;
			}
			if (answer[nx][ny] ==  1 && ny <= h - rS) {
				reorderEven(w, h, nx, ny, true, current + 1);
				return;
			}
			if (answer[nx][ny] == 10 && (answer[x][y] == 1 || answer[x][y] == rS * w)) {
				reorderEven(w, h, nx, ny, false, current + 1);
				return;
			}
			if (answer[nx][ny] == rS * w && ny >= lS) {
				reorderEven(w, h, nx, ny, false, current + 1);
				return;
			}
		}

	}

	void solveEven(int w, int h) {
		boolean found = false;
		int leftSize = 0, rightSize = 0, count = 0;
		for (int i = 0; 6 * i <= h; i++) {
			int x = h - 6 * i;
			for(int lS = 5; lS <= 8; lS++) {
				for(int rS = 5; rS <= 8; rS++) {
					if(lS + rS == x) {
						found = true;
						leftSize = lS;
						rightSize = rS;
						count = i;
						break;
					}
				}
				if(found) break;
			}
			if(found) break;
		}
		
		lS = leftSize;
		rS = rightSize;
		
		put(0, 0, leftEdge[w][leftSize][0], 0, 0);
		for (int i = 0; i < count; i++) {
			put(0, leftSize + i * 6, pass[w][6][0], leftSize * w + w * 6 * i, 0);
		}
		put(0, h - rightSize, rightEdge[w][rightSize][1], 0, 0);

		int sx = 0, sy = 0;

		for (int j = 0; j < h; j++) {
			for (int i = 0; i < w; i++) {
				if (answer[i][j] == 1) {
					sx = i;
					sy = j;
					break;
				}
			}
			if (sx != 0 || sy != 0)
				break;
		}
		
		//output(w, h, answer);
		reorderEven(w, h, sx, sy, true, 1);
		output(w, h, solution);
	}

	public void solve(int w, int h) {
		if (w % 2 == 1) {
			solveOdd(w, h);
		} else {
			solveEven(w, h);
		}
	}

	public static void main(String[] args) {
		for (int i = 10; i <= 1000; i += 2) {
			NightnareKnightSmallPrebuild nksp = new NightnareKnightSmallPrebuild();
			nksp.solve(8, i);
		}
	}

}
